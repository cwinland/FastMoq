<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>FastMoq.Core</name>
  </assembly>
  <members>
    <member name="T:FastMoq.Collections.MockerObservableCollection`1">
      <inheritdoc />
    </member>
    <member name="F:FastMoq.Collections.MockerObservableCollection`1.Changed">
      <summary>
       Occurs when the collection changes, either by adding or removing an item.
   </summary>
    </member>
    <member name="M:FastMoq.Collections.MockerObservableCollection`1.#ctor">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Collections.MockerObservableCollection`1.#ctor(IEnumerable{`0})">
      <exception cref="ArgumentNullException"> collection is a null reference </exception>
      <inheritdoc />
    </member>
    <member name="T:FastMoq.Collections.MockerObservableCollectionChangedEventArgs">
      <inheritdoc />
    </member>
    <member name="P:FastMoq.Collections.MockerObservableCollectionChangedEventArgs.NotifyCollectionChangedEventArgs">
      <summary>
       Gets the notify collection changed event arguments.
   </summary>
      <value>The notify collection changed event arguments.</value>
    </member>
    <member name="P:FastMoq.Collections.MockerObservableCollectionChangedEventArgs.PropertyChangedEventArgs">
      <summary>
       Gets the property changed event arguments.
   </summary>
      <value>The property changed event arguments.</value>
    </member>
    <member name="M:FastMoq.Collections.MockerObservableCollectionChangedEventArgs.#ctor(System.Nullable{NotifyCollectionChangedEventArgs})">
      <summary>
       Initializes a new instance of the <see cref="T:FastMoq.Collections.MockerObservableCollectionChangedEventArgs" /> class.
   </summary>
      <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:FastMoq.Collections.MockerObservableCollectionChangedEventArgs.#ctor(System.Nullable{PropertyChangedEventArgs})">
      <summary>
       Initializes a new instance of the <see cref="T:FastMoq.Collections.MockerObservableCollectionChangedEventArgs" /> class.
   </summary>
      <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="T:FastMoq.Extensions.TestClassExtensions">
      <summary>
Class TestClassExtensions.
</summary>
    </member>
    <member name="M:FastMoq.Extensions.TestClassExtensions.GetDefaultValue(System.Type)">
      <summary>
Gets the default value.
</summary>
      <param name="type">The type.</param>
      <returns>
        <see cref="T:System.Nullable" />.</returns>
    </member>
    <member name="M:FastMoq.Extensions.TestClassExtensions.GetField``1(``0,System.String)">
      <summary>
Gets the field.
</summary>
      <typeparam name="TObject">The type of the t object.</typeparam>
      <param name="obj">The object.</param>
      <param name="name">The name.</param>
      <returns>
        <see cref="T:System.Nullable" />.</returns>
    </member>
    <member name="M:FastMoq.Extensions.TestClassExtensions.GetFieldInfo``1(System.Object,System.String)">
      <summary>
Gets the field information.
</summary>
      <typeparam name="TType">The type of the t type.</typeparam>
      <param name="_">The object.</param>
      <param name="name">The name.</param>
      <returns>System.Nullable&lt;FieldInfo&gt;.</returns>
    </member>
    <member name="M:FastMoq.Extensions.TestClassExtensions.GetFieldValue``2(System.Object,System.String)">
      <summary>
Gets the field value.
</summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TType">The type of the t type.</typeparam>
      <param name="obj">The object.</param>
      <param name="name">The name.</param>
      <returns>System.Nullable&lt;T&gt;.</returns>
    </member>
    <member name="M:FastMoq.Extensions.TestClassExtensions.GetFieldValue``1(System.Object,System.Reflection.FieldInfo)">
      <summary>
Gets the field value.
</summary>
      <typeparam name="T">
      </typeparam>
      <param name="obj">The object.</param>
      <param name="field">The field.</param>
      <returns>System.Nullable&lt;T&gt;.</returns>
    </member>
    <member name="M:FastMoq.Extensions.TestClassExtensions.GetFieldValue``1(``0,System.String,``0)">
      <summary>
Gets the field value.
</summary>
      <typeparam name="TObject">The type of the t object.</typeparam>
      <param name="obj">The object.</param>
      <param name="name">The name.</param>
      <param name="defaultValue">The default value.</param>
      <returns>
        <see cref="T:System.Nullable" />.</returns>
    </member>
    <member name="M:FastMoq.Extensions.TestClassExtensions.GetMember``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
Gets the property value based on lambda.
</summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TValue">The type of the t value.</typeparam>
      <param name="_">The object.</param>
      <param name="memberLambda">The member lambda.</param>
      <returns>System.Nullable&lt;TValue&gt;.</returns>
    </member>
    <member name="M:FastMoq.Extensions.TestClassExtensions.GetMemberExpression``1(System.Linq.Expressions.Expression{``0})">
      <summary>
Gets the member expression.
</summary>
      <typeparam name="T">
      </typeparam>
      <param name="method">The method.</param>
      <returns>MemberExpression.</returns>
    </member>
    <member name="M:FastMoq.Extensions.TestClassExtensions.GetMemberExpression(System.Linq.Expressions.Expression)">
      <summary>
Gets the member expression.
</summary>
      <param name="method">The method.</param>
      <returns>MemberExpression.</returns>
    </member>
    <member name="M:FastMoq.Extensions.TestClassExtensions.GetMemberName``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
Gets the name of the member.
</summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TValue">The type of the t value.</typeparam>
      <param name="_">The .</param>
      <param name="memberLambda">The member lambda.</param>
      <returns>System.String.</returns>
    </member>
    <member name="M:FastMoq.Extensions.TestClassExtensions.GetMemberName(System.Linq.Expressions.Expression)">
      <summary>
Gets the name of the member.
</summary>
      <param name="memberLambda">The member lambda.</param>
      <returns>System.String.</returns>
    </member>
    <member name="M:FastMoq.Extensions.TestClassExtensions.GetMethod``1(``0,System.String)">
      <summary>
Gets the method.
</summary>
      <typeparam name="TObject">The type of the t object.</typeparam>
      <param name="obj">The object.</param>
      <param name="name">The name.</param>
      <returns>
        <see cref="T:System.Nullable" />.</returns>
    </member>
    <member name="M:FastMoq.Extensions.TestClassExtensions.GetMethodValue``1(``0,System.String,System.Object,object[])">
      <summary>
Gets the method value.
</summary>
      <typeparam name="TObject">The type of the t object.</typeparam>
      <param name="obj">The object.</param>
      <param name="name">The name.</param>
      <param name="defaultValue">The default value.</param>
      <param name="args">The arguments.</param>
      <returns>System.Nullable&lt;System.Object&gt;.</returns>
    </member>
    <member name="M:FastMoq.Extensions.TestClassExtensions.GetProperty``1(``0,System.String)">
      <summary>
Gets the property.
</summary>
      <typeparam name="TObject">The type of the t object.</typeparam>
      <param name="obj">The object.</param>
      <param name="name">The name.</param>
      <returns>
        <see cref="T:System.Nullable" />.</returns>
    </member>
    <member name="M:FastMoq.Extensions.TestClassExtensions.GetPropertyValue``1(``0,System.String,System.Object)">
      <summary>
Gets the property value.
</summary>
      <typeparam name="TObject">The type of the t object.</typeparam>
      <param name="obj">The object.</param>
      <param name="name">The name.</param>
      <param name="defaultValue">The default value.</param>
      <returns>
        <see cref="T:System.Nullable" />.</returns>
    </member>
    <member name="M:FastMoq.Extensions.TestClassExtensions.SetFieldValue``1(``0,System.String,System.Object)">
      <summary>
Sets the field value.
</summary>
      <typeparam name="TObject">The type of the t object.</typeparam>
      <param name="obj">The object.</param>
      <param name="name">The name.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:FastMoq.Extensions.TestClassExtensions.SetPropertyValue``1(``0,System.String,System.Object)">
      <summary>
Sets the property value.
</summary>
      <typeparam name="TObject">The type of the t object.</typeparam>
      <param name="obj">The object.</param>
      <param name="name">The name.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:FastMoq.Extensions.TestClassExtensions.EnsureNullCheckThrown(System.Action,System.String,System.String,System.Action{System.String})">
      <summary>
Ensures the null check thrown.
</summary>
      <param name="action">The action.</param>
      <param name="parameterName">Name of the parameter.</param>
      <param name="constructorName">Name of the constructor.</param>
      <param name="output">The output.</param>
    </member>
    <member name="T:FastMoq.Models.ConstructorModel">
      <inheritdoc />
      <summary>
       Class ConstructorModel.
   </summary>
    </member>
    <member name="P:FastMoq.Models.ConstructorModel.ConstructorInfo">
      <summary>
       Gets the constructor information.
   </summary>
      <value>The constructor information.</value>
    </member>
    <member name="P:FastMoq.Models.ConstructorModel.ParameterList">
      <summary>
       Gets the parameter list.
   </summary>
      <value>The parameter list.</value>
    </member>
    <member name="T:FastMoq.Models.DbContextMock`1">
      <summary>
       Wrapper for Mock.
       Implements the <see cref="T:Moq.Mock`1" /></summary>
      <typeparam name="TEntity">The type of the t entity.</typeparam>
      <inheritdoc />
      <seealso cref="T:Moq.Mock`1" />
    </member>
    <member name="P:FastMoq.Models.DbContextMock`1.CallBase">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Models.DbContextMock`1.#ctor">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Models.DbContextMock`1.#ctor(MockBehavior)">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Models.DbContextMock`1.#ctor(System.Object[])">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Models.DbContextMock`1.#ctor(Expression{Func{`0}},MockBehavior)">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Models.DbContextMock`1.#ctor(MockBehavior,System.Object[])">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Models.DbContextMock`1.SetupDbContextSetMethods(PropertyInfo)">
      <summary>
       Setups the mock.
   </summary>
      <param name="propertyInfo">The property information.</param>
      <exception cref="MissingMethodException">Unable to get Set method.</exception>
      <exception cref="InvalidOperationException">Unable to get Set method.</exception>
    </member>
    <member name="M:FastMoq.Models.DbContextMock`1.SetupDbSetProperties``1(PropertyInfo,``0)">
      <summary>
       Setups the database set properties.
   </summary>
      <typeparam name="TProperty">The type of the t property.</typeparam>
      <param name="propertyInfo">The property information.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:FastMoq.Models.DbContextMock`1.SetupDbSetPropertyGet``1(PropertyInfo,``0)">
      <summary>
       Setups the get.
   </summary>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <param name="propertyInfo">The property information.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:FastMoq.Models.DbContextMock`1.SetupDbSets(Mocker)">
      <summary>
       Setups the database sets.
   </summary>
      <param name="mocks">The mocks.</param>
      <returns>Setups the database sets.</returns>
    </member>
    <member name="M:FastMoq.Models.DbContextMock`1.SetupSetMethod(Type,Delegate,System.Nullable{Type}[],System.Nullable{System.Object}[])">
      <summary>
       Setups the set method.
   </summary>
      <param name="setType">Type of the set.</param>
      <param name="propValueDelegate">The property value delegate.</param>
      <param name="types">The types.</param>
      <exception cref="MissingMethodException">Unable to get Set method.</exception>
      <exception cref="InvalidOperationException">Unable to Get Setup.</exception>
    </member>
    <member name="T:FastMoq.Models.DbSetMock`1">
      <summary>
       Class DbSetMock.
       Implements the <see cref="T:Moq.Mock`1" /></summary>
      <typeparam name="TEntity">The type of the t entity.</typeparam>
      <inheritdoc />
      <seealso cref="T:Moq.Mock`1" />
    </member>
    <member name="M:FastMoq.Models.DbSetMock`1.#ctor">
      <inheritdoc />
      <summary>
       Initializes a new instance of the <see cref="T:FastMoq.Models.DbSetMock`1" /> class.
   </summary>
    </member>
    <member name="M:FastMoq.Models.DbSetMock`1.#ctor(System.Nullable{IList{`0}})">
      <inheritdoc />
      <summary>
       Initializes a new instance of the <see cref="T:FastMoq.Models.DbSetMock`1" /> class.
   </summary>
      <param name="initialData">The initial data.</param>
    </member>
    <member name="T:FastMoq.Models.FastMoqNonVoidSetupPhrase`1">
      <summary>
       Class FastMoqNonVoidSetupPhrase.
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:FastMoq.Models.FastMoqNonVoidSetupPhrase`1.#ctor(System.Object)">
      <summary>
       Initializes a new instance of the <see cref="T:FastMoq.Models.FastMoqNonVoidSetupPhrase`1" /> class.
   </summary>
      <param name="setupPhrase">The setup phrase.</param>
    </member>
    <member name="M:FastMoq.Models.FastMoqNonVoidSetupPhrase`1.Returns(Delegate,Type)">
      <summary>
       Returnses the specified value.
   </summary>
      <param name="value">The value.</param>
      <param name="resultType">Type of the result.</param>
      <returns>Returnses.</returns>
    </member>
    <member name="T:FastMoq.Models.IHistoryModel">
      <summary>
       Interface IHistoryModel used for identifying objects that can be put in the history model.
   </summary>
      <seealso cref="T:FastMoq.Models.IInstanceModel" />
      <seealso cref="T:FastMoq.Models.InstanceModel`1" />
      <seealso cref="T:FastMoq.Models.InstanceModel" />
      <seealso cref="T:FastMoq.Models.ConstructorModel" />
    </member>
    <member name="T:FastMoq.Models.IInstanceModel">
      <summary>
       Interface IInstanceModel
   </summary>
    </member>
    <member name="P:FastMoq.Models.IInstanceModel.Type">
      <summary>
       Gets the type.
   </summary>
      <value>The type.</value>
    </member>
    <member name="P:FastMoq.Models.IInstanceModel.CreateFunc">
      <summary>
       Gets the create function.
   </summary>
      <value>The create function.</value>
    </member>
    <member name="P:FastMoq.Models.IInstanceModel.InstanceType">
      <summary>
       Gets the type of the instance.
   </summary>
      <value>The type of the instance.</value>
    </member>
    <member name="P:FastMoq.Models.IInstanceModel.Arguments">
      <summary>
       Gets the arguments.
   </summary>
      <value>The arguments.</value>
    </member>
    <member name="T:FastMoq.Models.InstanceModel">
      <summary>
       Class InstanceModel.
   Implements the <see cref="T:FastMoq.Models.InstanceModel" /></summary>
      <inheritdoc cref="T:FastMoq.Models.IHistoryModel" />
      <inheritdoc cref="T:FastMoq.Models.IInstanceModel" />
      <seealso cref="T:FastMoq.Models.InstanceModel" />
    </member>
    <member name="P:FastMoq.Models.InstanceModel.Type">
      <inheritdoc />
    </member>
    <member name="P:FastMoq.Models.InstanceModel.InstanceType">
      <inheritdoc />
    </member>
    <member name="P:FastMoq.Models.InstanceModel.CreateFunc">
      <inheritdoc />
    </member>
    <member name="P:FastMoq.Models.InstanceModel.Arguments">
      <inheritdoc />
    </member>
    <member name="T:FastMoq.Models.InstanceModel`1">
      <inheritdoc />
      <summary>
       Class InstanceModel.
       Implements the <see cref="T:FastMoq.InstanceModel" /></summary>
      <typeparam name="TClass">The type of the t class.</typeparam>
      <seealso cref="T:FastMoq.InstanceModel" />
    </member>
    <member name="P:FastMoq.Models.InstanceModel`1.InstanceType">
      <inheritdoc />
    </member>
    <member name="P:FastMoq.Models.InstanceModel`1.CreateFunc">
      <summary>
       Gets or sets the create function.
   </summary>
      <value>The create function.</value>
    </member>
    <member name="M:FastMoq.Models.InstanceModel`1.#ctor">
      <inheritdoc />
      <summary>
       Initializes a new instance of the <see cref="T:FastMoq.InstanceModel`1" /> class.
   </summary>
    </member>
    <member name="M:FastMoq.Models.InstanceModel`1.#ctor(System.Nullable{Func{Mocker, `0}})">
      <inheritdoc />
      <summary>
       Initializes a new instance of the <see cref="T:FastMoq.InstanceModel`1" /> class.
   </summary>
      <param name="createFunc">The create function.</param>
    </member>
    <member name="M:FastMoq.Models.InstanceModel`1.#ctor(System.Nullable{Func{Mocker, `0}},List{System.Nullable{System.Object}})">
      <inheritdoc />
      <summary>
       Initializes a new instance of the <see cref="T:FastMoq.Models.InstanceModel`1" /> class.
   </summary>
      <param name="createFunc">The create function.</param>
      <param name="arguments">The arguments.</param>
    </member>
    <member name="M:FastMoq.Models.InstanceModel`1.#ctor(InstanceModel)">
      <inheritdoc />
      <summary>
       Initializes a new instance of the <see cref="T:FastMoq.Models.InstanceModel{T}" /> class.
   </summary>
      <param name="model">The model.</param>
    </member>
    <member name="T:FastMoq.Models.MockDbContextOptions`1">
      <summary>
       Class MockDbContextOptions.
       Implements the <see cref="T:Moq.Mock`1" /></summary>
      <typeparam name="T">
      </typeparam>
      <inheritdoc />
      <seealso cref="T:Moq.Mock`1" />
    </member>
    <member name="T:FastMoq.Models.MockModel`1">
      <summary>
       Class MockModel.
       Implements the <see cref="T:FastMoq.Models.MockModel" /></summary>
      <typeparam name="T">
      </typeparam>
      <seealso cref="T:FastMoq.Models.MockModel" />
      <inheritdoc cref="T:FastMoq.Models.MockModel" />
    </member>
    <member name="T:FastMoq.Models.MockModel">
      <summary>
       Contains Mock and Type information.
   </summary>
      <inheritdoc cref="IComparable{T}" />
      <inheritdoc cref="IComparable" />
      <inheritdoc cref="IEquatable{T}" />
      <inheritdoc cref="IEqualityComparer{T}" />
    </member>
    <member name="P:FastMoq.Models.MockModel`1.Mock">
      <summary>
       Gets or sets the mock.
   </summary>
      <value>The mock.</value>
    </member>
    <member name="M:FastMoq.Models.MockModel`1.CompareTo(System.Nullable{System.Object})">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Models.MockModel`1.Equals(System.Nullable{System.Object})">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Models.MockModel`1.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Models.MockModel`1.op_Equality(MockModel{`0},MockModel{`0})">
      <summary>
       Implements the == operator.
   </summary>
      <param name="a">a.</param>
      <param name="b">The b.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:FastMoq.Models.MockModel`1.op_Inequality(MockModel{`0},MockModel{`0})">
      <summary>
       Implements the != operator.
   </summary>
      <param name="a">a.</param>
      <param name="b">The b.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:FastMoq.Models.MockModel`1.CompareTo(System.Nullable{MockModel{`0}})">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Models.MockModel`1.Equals(System.Nullable{MockModel{`0}},System.Nullable{MockModel{`0}})">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Models.MockModel`1.GetHashCode(MockModel{`0})">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Models.MockModel`1.Equals(System.Nullable{MockModel{`0}})">
      <inheritdoc />
    </member>
    <member name="P:FastMoq.Models.MockModel.Mock">
      <summary>
       Gets or sets the mock.
   </summary>
      <value>The mock.</value>
    </member>
    <member name="P:FastMoq.Models.MockModel.NonPublic">
      <summary>
       Gets or sets a value indicating whether [non public].
   </summary>
      <value>
        <c>true</c> if [non public]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:FastMoq.Models.MockModel.Type">
      <summary>
       Gets or sets the type.
   </summary>
      <value>The type.</value>
    </member>
    <member name="M:FastMoq.Models.MockModel.Equals(System.Nullable{System.Object})">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Models.MockModel.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Models.MockModel.op_Equality(System.Nullable{MockModel},System.Nullable{MockModel})">
      <summary>
       Implements the == operator.
   </summary>
      <param name="a">a.</param>
      <param name="b">The b.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:FastMoq.Models.MockModel.op_Inequality(System.Nullable{MockModel},System.Nullable{MockModel})">
      <summary>
       Implements the != operator.
   </summary>
      <param name="a">a.</param>
      <param name="b">The b.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:FastMoq.Models.MockModel.ToString">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Models.MockModel.CompareTo(System.Nullable{System.Object})">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Models.MockModel.CompareTo(System.Nullable{MockModel})">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Models.MockModel.Equals(System.Nullable{MockModel},System.Nullable{MockModel})">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Models.MockModel.GetHashCode(MockModel)">
      <summary>
       Returns a hash code for this instance.
   </summary>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
    <member name="M:FastMoq.Models.MockModel.Equals(System.Nullable{MockModel})">
      <summary>
       Indicates whether the current object is equal to another object of the same type.
   </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise,
       <see langword="false" />.
   </returns>
    </member>
    <member name="T:FastMoq.Mocker">
      <summary>     Initializes the mocking helper object. This class creates and manages the automatic mocking and custom mocking. </summary>
      <summary>     Class Mocker. </summary>
    </member>
    <member name="M:FastMoq.Mocker.CreateInstance``1(System.Nullable{System.Object}[])">
      <summary>
       Creates an instance of <c>T</c>. Parameters allow matching of constructors and using those values in the creation
       of the instance.
   </summary>
      <typeparam name="T">The Mock <see cref="T:Type" />, usually an interface.</typeparam>
      <param name="args">The optional arguments used to create the instance.</param>
      <returns>
        <see cref="T:System.Nullable`1" />.</returns>
      <example>
        <code><![CDATA[
   IFileSystem fileSystem = CreateInstance<IFileSystem>();
   ]]></code>
      </example>
    </member>
    <member name="M:FastMoq.Mocker.CreateInstance``2(Dictionary{Type, System.Nullable{System.Object}})">
      <summary>
       Creates the instance.
   </summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TParam1">The type of the t param1.</typeparam>
      <param name="data">The data.</param>
      <returns>T.</returns>
    </member>
    <member name="M:FastMoq.Mocker.CreateInstance``3(Dictionary{Type, System.Nullable{System.Object}})">
      <summary>
       Creates the instance.
   </summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TParam1">The type of the t param1.</typeparam>
      <typeparam name="TParam2">The type of the t param2.</typeparam>
      <param name="data">The data.</param>
      <returns>T.</returns>
    </member>
    <member name="M:FastMoq.Mocker.CreateInstance``4(Dictionary{Type, System.Nullable{System.Object}})">
      <summary>
       Creates the instance.
   </summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TParam1">The type of the t param1.</typeparam>
      <typeparam name="TParam2">The type of the t param2.</typeparam>
      <typeparam name="TParam3">The type of the t param3.</typeparam>
      <param name="data">The data.</param>
      <returns>T.</returns>
    </member>
    <member name="M:FastMoq.Mocker.CreateInstance``5(Dictionary{Type, System.Nullable{System.Object}})">
      <summary>
       Creates the instance.
   </summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TParam1">The type of the t param1.</typeparam>
      <typeparam name="TParam2">The type of the t param2.</typeparam>
      <typeparam name="TParam3">The type of the t param3.</typeparam>
      <typeparam name="TParam4">The type of the t param4.</typeparam>
      <param name="data">The data.</param>
      <returns>T.</returns>
    </member>
    <member name="M:FastMoq.Mocker.CreateInstance``6(Dictionary{Type, System.Nullable{System.Object}})">
      <summary>
       Creates the instance.
   </summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TParam1">The type of the t param1.</typeparam>
      <typeparam name="TParam2">The type of the t param2.</typeparam>
      <typeparam name="TParam3">The type of the t param3.</typeparam>
      <typeparam name="TParam4">The type of the t param4.</typeparam>
      <typeparam name="TParam5">The type of the t param5.</typeparam>
      <param name="data">The data.</param>
      <returns>T.</returns>
    </member>
    <member name="M:FastMoq.Mocker.CreateInstance``7(Dictionary{Type, System.Nullable{System.Object}})">
      <summary>
       Creates the instance.
   </summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TParam1">The type of the t param1.</typeparam>
      <typeparam name="TParam2">The type of the t param2.</typeparam>
      <typeparam name="TParam3">The type of the t param3.</typeparam>
      <typeparam name="TParam4">The type of the t param4.</typeparam>
      <typeparam name="TParam5">The type of the t param5.</typeparam>
      <typeparam name="TParam6">The type of the t param6.</typeparam>
      <param name="data">The data.</param>
      <returns>T.</returns>
    </member>
    <member name="M:FastMoq.Mocker.CreateInstance``8(Dictionary{Type, System.Nullable{System.Object}})">
      <summary>
       Creates the instance.
   </summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TParam1">The type of the t param1.</typeparam>
      <typeparam name="TParam2">The type of the t param2.</typeparam>
      <typeparam name="TParam3">The type of the t param3.</typeparam>
      <typeparam name="TParam4">The type of the t param4.</typeparam>
      <typeparam name="TParam5">The type of the t param5.</typeparam>
      <typeparam name="TParam6">The type of the t param6.</typeparam>
      <typeparam name="TParam7">The type of the t param7.</typeparam>
      <param name="data">The arguments.</param>
      <returns>T.</returns>
    </member>
    <member name="M:FastMoq.Mocker.CreateInstance``9(Dictionary{Type, System.Nullable{System.Object}})">
      <summary>
       Creates the instance.
   </summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TParam1">The type of the t param1.</typeparam>
      <typeparam name="TParam2">The type of the t param2.</typeparam>
      <typeparam name="TParam3">The type of the t param3.</typeparam>
      <typeparam name="TParam4">The type of the t param4.</typeparam>
      <typeparam name="TParam5">The type of the t param5.</typeparam>
      <typeparam name="TParam6">The type of the t param6.</typeparam>
      <typeparam name="TParam7">The type of the t param7.</typeparam>
      <typeparam name="TParam8">The type of the t param8.</typeparam>
      <param name="data">The arguments.</param>
      <returns>T.</returns>
    </member>
    <member name="M:FastMoq.Mocker.CreateInstance``1(System.Boolean)">
      <summary>
       Creates an instance of <see cref="T:System.IO.Abstractions.IFileSystem" />.
   </summary>
      <typeparam name="T">
        <see cref="T:System.IO.Abstractions.IFileSystem" />.</typeparam>
      <param name="usePredefinedFileSystem">if set to <c>true</c> [use predefined file system].</param>
      <returns>
        <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:FastMoq.Mocker.CreateInstance``1(System.Boolean,System.Nullable{System.Object}[])">
      <summary>
       Creates the instance.
   </summary>
      <typeparam name="T">The Mock <see cref="T:Type" />, usually an interface.</typeparam>
      <param name="usePredefinedFileSystem">if set to <c>true</c> [use predefined file system].</param>
      <param name="args">The arguments.</param>
      <returns>
        <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:FastMoq.Mocker.CreateInstanceNonPublic``1(System.Nullable{System.Object}[])">
      <summary>
       Creates an instance of <c>T</c>.
       Non public constructors are included as options for creating the instance.
       Parameters allow matching of constructors and using those values in the creation of the instance.
   </summary>
      <typeparam name="T">The Mock <see cref="T:Type" />, usually an interface.</typeparam>
      <param name="args">The arguments.</param>
      <returns>
        <see cref="T:System.Nullable`1" />
      </returns>
      <example>
        <code><![CDATA[
   IModel model = CreateInstanceNonPublic<IModel>();
   ]]></code>
      </example>
    </member>
    <member name="M:FastMoq.Mocker.CreateInstanceNonPublic(Type,System.Nullable{System.Object}[])">
      <summary>
       Creates the instance non public.
   </summary>
      <param name="type">The type.</param>
      <param name="args">The arguments.</param>
      <returns>System.Nullable&lt;System.Object&gt;.</returns>
    </member>
    <member name="M:FastMoq.Mocker.CreateMock(Type,System.Boolean,System.Nullable{System.Object}[])">
      <summary>
       Creates the <see cref="T:FastMoq.Models.MockModel" /> from the <c>Type</c>. This throws an exception if the mock already exists.
   </summary>
      <param name="type">The type.</param>
      <param name="nonPublic">
        <c>true</c> if non public and public constructors are used.</param>
      <param name="args">The arguments used to match to the constructor.</param>
      <returns>
        <see cref="T:System.Collections.Generic.List`1" />.</returns>
      <exception cref="T:System.ArgumentException">type must be a class. - type</exception>
      <exception cref="T:System.ApplicationException">Cannot create instance.</exception>
    </member>
    <member name="M:FastMoq.Mocker.CreateMock``1(System.Boolean,System.Nullable{System.Object}[])">
      <summary>
       Creates the <see cref="T:FastMoq.Models.MockModel" /> from the type <c>T</c>. This throws an exception if the mock already exists.
   </summary>
      <typeparam name="T">The Mock <see cref="T:Type" />, usually an interface.</typeparam>
      <param name="nonPublic">if set to <c>true</c> public and non public constructors are used.</param>
      <param name="args">The arguments used to find the correct constructor for a class.</param>
      <returns>
        <see cref="T:System.Collections.Generic.List`1" />.</returns>
      <exception cref="T:System.ArgumentException">type must be a class. - type</exception>
      <exception cref="T:System.ArgumentException">type already exists. - type</exception>
      <exception cref="T:System.ApplicationException">Cannot create instance.</exception>
    </member>
    <member name="M:FastMoq.Mocker.CreateMockInstance(Type,System.Boolean,System.Nullable{System.Object}[])">
      <summary>
       Creates the mock instance that is not automatically injected.
   </summary>
      <param name="type">The type.</param>
      <param name="nonPublic">if set to <c>true</c> [non public].</param>
      <param name="args">The arguments used to find the correct constructor for a class.</param>
      <returns>Mock.</returns>
      <exception cref="T:System.ArgumentException">type must be a class or interface., nameof(type)</exception>
      <exception cref="T:System.ApplicationException">type must be a class or interface., nameof(type)</exception>
      <exception cref="T:System.ArgumentException">type must be a class or interface., nameof(type)</exception>
      <exception cref="T:System.ApplicationException">type must be a class or interface., nameof(type)</exception>
    </member>
    <member name="M:FastMoq.Mocker.CreateMockInstance``1(System.Boolean,System.Nullable{System.Object}[])">
      <summary>
       Creates the mock instance that is not automatically injected.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="nonPublic">if set to <c>true</c> [non public].</param>
      <param name="args">The arguments used to find the correct constructor for a class.</param>
      <returns>Mock.</returns>
      <exception cref="T:System.ArgumentException">type must be a class. - type</exception>
      <exception cref="T:System.ApplicationException">Cannot create instance.</exception>
    </member>
    <member name="F:FastMoq.Mocker.fileSystem">
      <summary>
       The virtual mock file system that is used by mocker unless overridden with the <see cref="P:FastMoq.Mocker.Strict" /> property.
   </summary>
    </member>
    <member name="P:FastMoq.Mocker.ConstructorHistory">
      <summary>
       Gets the constructor history.
   </summary>
      <value>The constructor history.</value>
    </member>
    <member name="P:FastMoq.Mocker.DbConnection">
      <summary>
       Gets the database connection.
   </summary>
      <value>The database connection.</value>
    </member>
    <member name="P:FastMoq.Mocker.InnerMockResolution">
      <summary>
       When creating a mocks of a class, this indicates to recursively inject the mocks inside of that class.
   </summary>
      <value>The inner mock resolution.</value>
    </member>
    <member name="P:FastMoq.Mocker.Strict">
      <summary>
       Gets or sets a value indicating whether this <see cref="T:FastMoq.Mocker" /> is strict.
   </summary>
      <value>
        <c>true</c> if strict <see cref="T:System.IO.Abstractions.IFileSystem" /> resolution; otherwise, <c>false</c> uses the built-in virtual
   <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileSystem" />.</value>
      <remarks>If strict, the mock
   <see cref="T:System.IO.Abstractions.IFileSystem" /> does
   not use <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileSystem" /> and uses <see cref="T:Moq.Mock" /> of <see cref="T:System.IO.Abstractions.IFileSystem" />.
   Gets or sets a value indicating whether this <see cref="T:FastMoq.Mocker" /> is strict. If strict, the mock
   <see cref="P:FastMoq.Mocker.HttpClient" /> does
   not use the pre-built HttpClient and uses <see cref="T:Moq.Mock" /> of <see cref="P:FastMoq.Mocker.HttpClient" />.</remarks>
    </member>
    <member name="M:FastMoq.Mocker.#ctor">
      <summary>
       Initializes a new instance of the <see cref="T:FastMoq.Mocker" /> class.
   </summary>
    </member>
    <member name="M:FastMoq.Mocker.#ctor(Dictionary{Type, IInstanceModel})">
      <inheritdoc />
      <summary>
       Initializes a new instance of the <see cref="T:FastMoq.Mocker" /> class using the specific typeMap.
       The typeMap assists in resolution of interfaces to instances.
   </summary>
      <param name="typeMap">The type map.</param>
    </member>
    <member name="M:FastMoq.Mocker.AddInjections``1(``0,System.Nullable{Type})">
      <summary>
       Adds the injections to the specified object properties and fields.
   </summary>
      <typeparam name="T">The type.</typeparam>
      <param name="obj">The object.</param>
      <param name="referenceType">Override object type used for injection attribute references.</param>
      <returns>T.</returns>
    </member>
    <member name="M:FastMoq.Mocker.AddMock``1(Mock{``0},System.Boolean,System.Boolean)">
      <summary>
       Creates a <see cref="T:FastMoq.Models.MockModel" /> with the given <see cref="T:Moq.Mock" /> with the option of overwriting an existing
   <see cref="T:FastMoq.Models.MockModel" /></summary>
      <typeparam name="T">The Mock <see cref="T:Type" />, usually an interface.</typeparam>
      <param name="mock">Mock to Add.</param>
      <param name="overwrite">Overwrite if the mock exists or throw <see cref="ArgumentException" /> if this parameter is
   false.</param>
      <param name="nonPublic">if set to <c>true</c> uses public and non public constructors.</param>
      <returns>
        <see cref="T:FastMoq.Models.MockModel`1" />.</returns>
    </member>
    <member name="M:FastMoq.Mocker.AddProperties``1(``0)">
      <summary>
       Adds the property data to the object.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="obj">The object.</param>
      <returns>T.</returns>
    </member>
    <member name="M:FastMoq.Mocker.AddProperties(Type,System.Nullable{System.Object})">
      <summary>
       Adds the property data to the object.
   </summary>
      <param name="type">The type.</param>
      <param name="obj">The object.</param>
      <returns>object.</returns>
    </member>
    <member name="M:FastMoq.Mocker.AddType(Type,Type,System.Nullable{Func{Mocker, System.Object}},System.Boolean,System.Nullable{System.Object}[])">
      <summary>
       Adds an interface to Class mapping to the <see cref="F:FastMoq.Mocker.typeMap" /> for easier resolution.
   </summary>
      <param name="tInterface">The interface or class Type which can be mapped to a specific Class.</param>
      <param name="tClass">The Class Type (cannot be an interface) that can be created and assigned to tInterface.</param>
      <param name="createFunc">An optional create function used to create the class.</param>
      <param name="replace">Replace type if already exists. Default: false.</param>
      <param name="args">arguments needed in model.</param>
      <exception cref="T:System.ArgumentException">
      </exception>
    </member>
    <member name="M:FastMoq.Mocker.AddType``1(System.Nullable{Func{Mocker, ``0}},System.Boolean,System.Nullable{System.Object}[])">
      <summary>
       Adds the type.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="createFunc">The create function.</param>
      <param name="replace">if set to <c>true</c> [replace].</param>
      <param name="args">arguments needed in model.</param>
    </member>
    <member name="M:FastMoq.Mocker.AddType``2(System.Nullable{Func{Mocker, ``1}},System.Boolean,System.Nullable{System.Object}[])">
      <summary>
       Adds an interface to Class mapping to the <see cref="F:FastMoq.Mocker.typeMap" /> for easier resolution.
   </summary>
      <typeparam name="TInterface">The interface or class Type which can be mapped to a specific Class.</typeparam>
      <typeparam name="TClass">The Class Type (cannot be an interface) that can be created and assigned to TInterface /&gt;.</typeparam>
      <param name="createFunc">An optional create function used to create the class.</param>
      <param name="replace">Replace type if already exists. Default: false.</param>
      <param name="args">arguments needed in model.</param>
      <exception cref="ArgumentException">$"{typeof(TClass).Name} cannot be an interface."</exception>
      <exception cref="ArgumentException">$"{typeof(TClass).Name} is not assignable to {typeof(TInterface).Name}."</exception>
    </member>
    <member name="M:FastMoq.Mocker.Contains``1">
      <summary>
       Determines whether this instance contains a Mock of <c>T</c>.
   </summary>
      <typeparam name="T">The Mock <see cref="T:Type" />, usually an interface.</typeparam>
      <returns>
        <c>true</c> if the <c><![CDATA[Mock<T>]]></c> exists; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">type is null.</exception>
      <exception cref="T:System.ArgumentException">type must be a class. - type</exception>
    </member>
    <member name="M:FastMoq.Mocker.Contains(Type)">
      <summary>
       Determines whether this instance contains the Mock of <c>type</c>.
   </summary>
      <param name="type">The <see cref="T:Type" />, usually an interface.</param>
      <returns>
        <c>true</c> if <see cref="T:Moq.Mock`1" /> exists; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
      </exception>
      <exception cref="T:System.ArgumentException">type must be a class. - type</exception>
    </member>
    <member name="M:FastMoq.Mocker.GetArgData``1(System.Nullable{Dictionary{Type, System.Nullable{System.Object}}})">
      <summary>
       Gets the argument data.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="data">The data.</param>
      <returns>System.Nullable&lt;System.Object&gt;[].</returns>
    </member>
    <member name="M:FastMoq.Mocker.GetContentBytes(HttpContent)">
      <summary>
       Gets the content bytes.
   </summary>
      <param name="content">The content.</param>
      <returns>byte[].</returns>
    </member>
    <member name="M:FastMoq.Mocker.GetContentStream(HttpContent)">
      <summary>
       Gets the content stream.
   </summary>
      <param name="content">The content.</param>
      <returns>System.IO.Stream.</returns>
    </member>
    <member name="M:FastMoq.Mocker.GetHttpHandlerSetup(System.Nullable{Expression},System.Nullable{Expression})">
      <summary>
       Gets the HTTP handler setup.
   </summary>
      <param name="request">The request.</param>
      <param name="cancellationToken">The cancellation token.</param>
      <returns>ISetup&lt;HttpMessageHandler, Task&lt;HttpResponseMessage&gt;&gt;.</returns>
    </member>
    <member name="M:FastMoq.Mocker.GetList``1(System.Int32,System.Nullable{Func{System.Int32, ``0}},System.Nullable{Action{System.Int32, ``0}})">
      <summary>
       Gets a list with the specified number of list items, using a custom function.
   </summary>
      <typeparam name="T">The Mock <see cref="T:Type" />, usually an interface.</typeparam>
      <param name="count">The number of list items.</param>
      <param name="func">The function for creating the list items.</param>
      <param name="initAction">The initialize action.</param>
      <returns>
        <see cref="List{T}" />.</returns>
      <example>
   Example of how to create a list.
  <code><![CDATA[
   GetList<Model>(3, (i) => new Model(name: i.ToString()));
   ]]></code>
   or
  <code><![CDATA[
   GetList<IModel>(3, (i) => Mocks.CreateInstance<IModel>(i));
   ]]></code></example>
    </member>
    <member name="M:FastMoq.Mocker.GetList``1(System.Int32,System.Nullable{Func{System.Int32, ``0}})">
      <summary>
       Gets a list with the specified number of list items, using a custom function.
   </summary>
      <typeparam name="T">The Mock <see cref="T:Type" />, usually an interface.</typeparam>
      <param name="count">The number of list items.</param>
      <param name="func">The function for creating the list items.</param>
      <returns>
        <see cref="List{T}" />.</returns>
      <example>
   Example of how to create a list.
  <code><![CDATA[
   GetList<Model>(3, (i) => new Model(name: i.ToString()));
   ]]></code>
   or
  <code><![CDATA[
   GetList<IModel>(3, (i) => Mocks.CreateInstance<IModel>(i));
   ]]></code></example>
    </member>
    <member name="M:FastMoq.Mocker.GetList``1(System.Int32,System.Nullable{Func{``0}})">
      <summary>
       Gets a list with the specified number of list items, using a custom function.
   </summary>
      <typeparam name="T">The Mock <see cref="T:Type" />, usually an interface.</typeparam>
      <param name="count">The number of list items.</param>
      <param name="func">The function for creating the list items.</param>
      <returns>
        <see cref="List{T}" />.</returns>
      <example>
   Example of how to create a list.
  <code><![CDATA[
   GetList<Model>(3, () => new Model(name: Guid.NewGuid().ToString()));
   ]]></code>
   or
  <code><![CDATA[
   GetList<IModel>(3, () => Mocks.CreateInstance<IModel>());
   ]]></code></example>
    </member>
    <member name="M:FastMoq.Mocker.GetMessageProtectedAsync``2(System.String,System.Nullable{System.Object}[])">
      <summary>
       Gets the message protected asynchronous.
   </summary>
      <typeparam name="TMock">The type of the t mock.</typeparam>
      <typeparam name="TReturn">The type of the t return.</typeparam>
      <param name="methodOrPropertyName">Name of the method or property.</param>
      <param name="args">The arguments.</param>
      <returns>ISetup&lt;TMock, Task&lt;TReturn&gt;&gt;.</returns>
    </member>
    <member name="M:FastMoq.Mocker.GetMethodArgData(MethodInfo,System.Nullable{Dictionary{Type, System.Nullable{System.Object}}})">
      <summary>
       Gets the method argument data.
   </summary>
      <param name="method">The method.</param>
      <param name="data">The data.</param>
      <returns>System.Nullable&lt;System.Object&gt;[].</returns>
      <exception cref="T:System.ArgumentNullException">method</exception>
    </member>
    <member name="M:FastMoq.Mocker.GetMethodDefaultData(MethodInfo)">
      <summary>
       Gets the method default data.
   </summary>
      <param name="method">The method.</param>
      <returns>object?[].</returns>
      <exception cref="T:System.ArgumentNullException">method</exception>
    </member>
    <member name="M:FastMoq.Mocker.GetMock``1(System.Nullable{System.Object}[])">
      <summary>
       Gets or creates the mock of type <c>T</c>.
   </summary>
      <typeparam name="T">The Mock <see cref="T:Type" />, usually an interface.</typeparam>
      <param name="args">The arguments to get the constructor.</param>
      <returns>
        <see cref="T:Moq.Mock`1" />.</returns>
    </member>
    <member name="M:FastMoq.Mocker.GetMock(Type,System.Nullable{System.Object}[])">
      <summary>
       Gets of creates the mock of <c>type</c>.
   </summary>
      <param name="type">The type.</param>
      <param name="args">The arguments used to find the correct constructor for a class.</param>
      <returns>
        <see cref="T:Moq.Mock" />.</returns>
    </member>
    <member name="M:FastMoq.Mocker.GetObject(ParameterInfo)">
      <summary>
       Gets the instance for the given <see cref="T:System.Reflection.ParameterInfo" />.
   </summary>
      <param name="info">The <see cref="T:System.Reflection.ParameterInfo" />.</param>
      <returns>
        <see cref="Nullable{Object}" />
      </returns>
      <exception cref="T:System.ArgumentNullException">info</exception>
      <exception cref="T:System.InvalidProgramException">info</exception>
    </member>
    <member name="M:FastMoq.Mocker.GetObject(Type,System.Nullable{Action{System.Nullable{System.Object}}})">
      <summary>
       Gets the instance for the given <c>type</c>.
   </summary>
      <param name="type">The type.</param>
      <param name="initAction">The initialize action.</param>
      <returns>
        <see cref="Nullable{Object}" />.</returns>
      <exception cref="T:System.ArgumentNullException">type</exception>
      <exception cref="T:System.InvalidProgramException">Unable to get the Mock.</exception>
    </member>
    <member name="M:FastMoq.Mocker.GetObject``1(Action{System.Nullable{``0}})">
      <summary>
       Gets the instance for the given <c>T</c> and runs the given function against the object.
   </summary>
      <typeparam name="T">The Mock <see cref="T:Type" />, usually an interface.</typeparam>
      <param name="initAction">The initialize action.</param>
      <returns>
        <c>T</c>.</returns>
    </member>
    <member name="M:FastMoq.Mocker.GetObject``1">
      <summary>
       Gets the object.
   </summary>
      <typeparam name="T">
      </typeparam>
      <returns>System.Nullable&lt;T&gt;.</returns>
    </member>
    <member name="M:FastMoq.Mocker.GetObject``1(System.Nullable{System.Object}[])">
      <summary>
       Gets the object.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="args">The arguments.</param>
      <returns>T.</returns>
    </member>
    <member name="M:FastMoq.Mocker.GetProtectedMock(Type,System.Nullable{System.Object}[])">
      <summary>
       Gets the protected mock.
   </summary>
      <param name="type">The type.</param>
      <param name="args">The arguments.</param>
      <returns>Mock of the protected mock.</returns>
    </member>
    <member name="M:FastMoq.Mocker.GetRequiredMock(Type)">
      <summary>
       Gets the required mock.
   </summary>
      <param name="type">The mock type, usually an interface.</param>
      <returns>Mock.</returns>
      <exception cref="T:System.ArgumentException">type must be a class. - type</exception>
      <exception cref="T:System.InvalidOperationException">type must be a class. - type</exception>
    </member>
    <member name="M:FastMoq.Mocker.GetRequiredMock``1">
      <summary>
       Gets the required mock.
   </summary>
      <typeparam name="T">The Mock <see cref="T:Type" />, usually an interface.</typeparam>
      <returns>
        <see cref="T:Moq.Mock`1" />.</returns>
      <exception cref="T:System.ArgumentException">type must be a class. - type</exception>
      <exception cref="T:System.InvalidOperationException">Mock must exist. - type</exception>
    </member>
    <member name="M:FastMoq.Mocker.GetStringContent(HttpContent)">
      <summary>
       Gets the content of the string.
   </summary>
      <param name="content">The content.</param>
      <returns>string.</returns>
    </member>
    <member name="M:FastMoq.Mocker.Initialize``1(Action{Mock{``0}},System.Boolean)">
      <summary>
       Gets or Creates then Initializes the specified Mock of <c>T</c>.
   </summary>
      <typeparam name="T">The Mock <see cref="T:Type" />, usually an interface.</typeparam>
      <param name="action">The action.</param>
      <param name="reset">
        <c>False to keep the existing setup.</c>
      </param>
      <returns>
        <see cref="T:Moq.Mock`1" />
      </returns>
      <exception cref="T:System.InvalidOperationException">Invalid Mock.</exception>
      <example>
   Example of how to set up for mocks that require specific functionality.
  <code><![CDATA[
   mocks.Initialize<ICarService>(mock => {
   mock.Setup(x => x.StartCar).Returns(true));
   mock.Setup(x => x.StopCar).Returns(false));
   }
   ]]></code></example>
    </member>
    <member name="M:FastMoq.Mocker.InvokeMethod``1(System.String,System.Boolean,System.Nullable{System.Object}[])">
      <summary>
       Invokes the static method.
   </summary>
      <typeparam name="TClass">The type of the t class.</typeparam>
      <param name="methodName">Name of the method.</param>
      <param name="nonPublic">if set to <c>true</c> [non public].</param>
      <param name="args">The arguments used for the method.</param>
      <returns>
        <see cref="Nullable" />.</returns>
    </member>
    <member name="M:FastMoq.Mocker.InvokeMethod``1(System.Nullable{``0},System.String,System.Boolean,System.Nullable{System.Object}[])">
      <summary>
       Invokes the method.
   </summary>
      <typeparam name="TClass">The type of the t class.</typeparam>
      <param name="obj">The object.</param>
      <param name="methodName">Name of the method.</param>
      <param name="nonPublic">if set to <c>true</c> [non public].</param>
      <param name="args">The arguments used for the method.</param>
      <returns>
        <see cref="Nullable" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:FastMoq.Mocker.RemoveMock``1(Mock{``0})">
      <summary>
       Remove specified Mock of <c>T</c>.
   </summary>
      <typeparam name="T">The Mock <see cref="T:Type" />, usually an interface.</typeparam>
      <param name="mock">Mock to Remove.</param>
      <returns>
        <c>true</c> if the mock is successfully removed, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:FastMoq.Mocker.SetupHttpMessage(Func{HttpResponseMessage},System.Nullable{Expression},System.Nullable{Expression})">
      <summary>
       Setups the HTTP message.
   </summary>
      <param name="messageFunc">The message function.</param>
      <param name="request">The request.</param>
      <param name="cancellationToken">The cancellation token.</param>
    </member>
    <member name="M:FastMoq.Mocker.SetupMessage``2(Expression{Func{``0, ``1}},Func{``1})">
      <summary>
       Setups the message.
   </summary>
      <typeparam name="TMock">The type of the mock.</typeparam>
      <typeparam name="TReturn">The type of the return value.</typeparam>
      <param name="expression">The expression.</param>
      <param name="messageFunc">The message function.</param>
    </member>
    <member name="M:FastMoq.Mocker.SetupMessageAsync``2(Expression{Func{``0, Task{``1}}},Func{``1})">
      <summary>
       Setups the message asynchronous.
   </summary>
      <typeparam name="TMock">The type of the mock.</typeparam>
      <typeparam name="TReturn">The type of the return value.</typeparam>
      <param name="expression">The expression.</param>
      <param name="messageFunc">The message function.</param>
      <exception cref="T:System.IO.InvalidDataException">Unable to setup '{typeof(TMock)}'.</exception>
    </member>
    <member name="M:FastMoq.Mocker.SetupMessageProtected``2(System.String,Func{``1},System.Nullable{System.Object}[])">
      <summary>
       Setups the message protected.
   </summary>
      <typeparam name="TMock">The type of the mock.</typeparam>
      <typeparam name="TReturn">The type of the return value.</typeparam>
      <param name="methodOrPropertyName">Name of the method or property.</param>
      <param name="messageFunc">The message function.</param>
      <param name="args">The arguments.</param>
    </member>
    <member name="M:FastMoq.Mocker.SetupMessageProtectedAsync``2(System.String,Func{``1},System.Nullable{System.Object}[])">
      <summary>
       Setups the message protected asynchronous.
   </summary>
      <typeparam name="TMock">The type of the mock.</typeparam>
      <typeparam name="TReturn">The type of the return value.</typeparam>
      <param name="methodOrPropertyName">Name of the method or property.</param>
      <param name="messageFunc">The message function.</param>
      <param name="args">The arguments.</param>
    </member>
    <member name="M:FastMoq.Mocker.HasParameterlessConstructor(Type)">
      <summary>
       Determines whether [has parameterless constructor] [the specified type].
   </summary>
      <param name="type">The type.</param>
      <returns>
        <c>true</c> if [has parameterless constructor] [the specified type]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:FastMoq.Mocker.GetDbContext``1(System.Nullable{DbContextOptions{``0}},System.Nullable{DbConnection})">
      <summary>
       Gets the database context using a SqlLite DB or provided options and DbConnection.
   </summary>
      <typeparam name="TContext">The type of the t context.</typeparam>
      <param name="options">The options.</param>
      <param name="connection">The connection.</param>
      <returns>TContext of the database context.</returns>
    </member>
    <member name="M:FastMoq.Mocker.GetDbContext``1(Func{DbContextOptions{``0}, ``0},System.Nullable{DbContextOptions{``0}},System.Nullable{DbConnection})">
      <summary>
       Gets the database context using a SqlLite DB or provided options and DbConnection.
   </summary>
      <typeparam name="TContext">The type of the t context.</typeparam>
      <param name="newObjectFunc">The new object function.</param>
      <param name="options">The options.</param>
      <param name="connection">The connection.</param>
      <returns>TContext.</returns>
    </member>
    <member name="M:FastMoq.Mocker.GetMockDbContext(Type)">
      <summary>
       Gets the mock database context.
   </summary>
      <param name="contextType">Type of the context.</param>
      <returns>Mock of the mock database context.</returns>
      <exception cref="NotSupportedException">
      </exception>
      <exception cref="MissingMethodException">GetMockDbContext</exception>
    </member>
    <member name="M:FastMoq.Mocker.GetMockDbContext``1">
      <summary>
       Gets the mock database context.
   </summary>
      <typeparam name="TDbContext">The type of the t database context.</typeparam>
      <returns>Mock&lt;TDbContext&gt; of the mock database context.</returns>
    </member>
    <member name="P:FastMoq.Mocker.HttpClient">
      <summary>
       The virtual mock http client that is used by mocker unless overridden with the <see cref="P:FastMoq.Mocker.Strict" /> property.
   </summary>
      <value>The HTTP client.</value>
    </member>
    <member name="M:FastMoq.Mocker.CreateHttpClient(System.String,System.String,HttpStatusCode,System.String)">
      <summary>
       Creates the HTTP client.
   </summary>
      <param name="clientName">Name of the client.</param>
      <param name="baseAddress">The base address.</param>
      <param name="statusCode">The status code.</param>
      <param name="stringContent">Content of the string.</param>
      <returns>
        <see cref="P:FastMoq.Mocker.HttpClient" />.</returns>
    </member>
    <member name="T:FastMoq.MockerTestBase`1">
      <summary>     Class MockerTestBase.     Implements the <see cref="IDisposable" /></summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <inheritdoc />
      <seealso cref="IDisposable" />
      <summary>     Auto Mocking Test Base with Fast Automatic Mocking <see cref="T:FastMoq.Mocker" />. </summary>
      <example>     Basic example of the base class creating the Car class and auto mocking ICarService.    <code><![CDATA[ public class CarTest : MockerTestBase<Car> {      [Fact]      public void TestCar() {          Component.Color.Should().Be(Color.Green);          Component.CarService.Should().NotBeNull();      } } public class Car {      public Color Color { get; set; } = Color.Green;      public ICarService CarService { get; }      public Car(ICarService carService) => CarService = carService; } public interface ICarService {      Color Color { get; set; }      ICarService CarService { get; }      bool StartCar(); }  ]]></code>     Example of how to set up for mocks that require specific functionality.    <code><![CDATA[ public class CarTest : MockerTestBase<Car> {      public CarTest() : base(mocks => mocks.Initialize<ICarService>(mock => mock.Setup(x => x.StartCar).Returns(true)); }  ]]></code></example>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <seealso cref="IDisposable" />
      <inheritdoc />
    </member>
    <member name="M:FastMoq.MockerTestBase`1.WaitFor``1(Func{``0},TimeSpan,TimeSpan)">
      <summary>
       Waits for an action.
   </summary>
      <typeparam name="T">Logic of T.</typeparam>
      <param name="logic">The action.</param>
      <param name="timespan">The maximum time to wait.</param>
      <param name="waitBetweenChecks">Time between each check.</param>
      <returns>T.</returns>
      <exception cref="T:System.ArgumentNullException">logic</exception>
      <exception cref="T:System.ApplicationException">Waitfor Timeout</exception>
    </member>
    <member name="M:FastMoq.MockerTestBase`1.WaitFor``1(Func{``0})">
      <summary>
       Waits for an action.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="logic">The action.</param>
      <returns>T.</returns>
      <exception cref="T:System.ArgumentNullException">logic</exception>
    </member>
    <member name="M:FastMoq.MockerTestBase`1.WaitFor``1(Func{``0},TimeSpan)">
      <summary>
       Waits for an action.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="logic">The action.</param>
      <param name="timespan">The timespan, defaults to 4 seconds.</param>
      <returns>T.</returns>
      <exception cref="T:System.ArgumentNullException">logic</exception>
    </member>
    <member name="M:FastMoq.MockerTestBase`1.Dispose">
      <inheritdoc />
      <summary>
       Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
   </summary>
    </member>
  </members>
</doc>