<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>FastMoq.Core</name>
  </assembly>
  <members>
    <member name="T:FastMoq.InstanceModel`1">
      <inheritdoc />
      <summary>
       Class InstanceModel.
       Implements the <see cref="T:FastMoq.InstanceModel" /></summary>
      <typeparam name="TClass">The type of the t class.</typeparam>
      <seealso cref="T:FastMoq.InstanceModel" />
    </member>
    <member name="T:FastMoq.InstanceModel">
      <summary>
       Class InstanceModel.
   Implements the <see cref="T:FastMoq.InstanceModel" /></summary>
      <seealso cref="T:FastMoq.InstanceModel" />
    </member>
    <member name="P:FastMoq.InstanceModel`1.CreateFunc">
      <summary>
       Gets or sets the create function.
   </summary>
      <value>The create function.</value>
    </member>
    <member name="M:FastMoq.InstanceModel`1.#ctor">
      <inheritdoc />
      <summary>
       Initializes a new instance of the <see cref="T:FastMoq.InstanceModel`1" /> class.
   </summary>
    </member>
    <member name="M:FastMoq.InstanceModel`1.#ctor(System.Nullable{Func{Mocker, `0}})">
      <inheritdoc />
      <summary>
       Initializes a new instance of the <see cref="T:FastMoq.InstanceModel`1" /> class.
   </summary>
      <param name="createFunc">The create function.</param>
    </member>
    <member name="M:FastMoq.InstanceModel`1.#ctor(System.Nullable{Func{Mocker, `0}},List{System.Object})">
      <inheritdoc />
      <summary>
       Initializes a new instance of the <see cref="T:FastMoq.InstanceModel`1" /> class.
   </summary>
      <param name="createFunc">The create function.</param>
      <param name="arguments">The arguments.</param>
    </member>
    <member name="P:FastMoq.InstanceModel.InstanceType">
      <summary>
       Gets or sets the type of the instance.
   </summary>
      <value>The type of the instance.</value>
    </member>
    <member name="P:FastMoq.InstanceModel.CreateFunc">
      <summary>
       Gets or sets the create function.
   </summary>
      <value>The create function.</value>
    </member>
    <member name="P:FastMoq.InstanceModel.Arguments">
      <summary>
       Gets the arguments.
   </summary>
      <value>The arguments.</value>
    </member>
    <member name="T:FastMoq.Mocker">
      <summary>
Initializes the mocking helper object. This class creates and manages the automatic mocking and custom mocking.
</summary>
    </member>
    <member name="F:FastMoq.Mocker.fileSystem">
      <summary>
The virtual mock file system that is used by mocker unless overridden with the <see cref="T:FastMoq.Mocker.Strict" /> property.
</summary>
    </member>
    <member name="F:FastMoq.Mocker.mockCollection">
      <summary>
List of <see cref="T:FastMoq.MockModel`1" />.
</summary>
    </member>
    <member name="P:FastMoq.Mocker.HttpClient">
      <summary>
The virtual mock http client that is used by mocker unless overridden with the <see cref="T:FastMoq.Mocker.Strict" /> property.
</summary>
    </member>
    <member name="P:FastMoq.Mocker.InnerMockResolution">
      <summary>
When creating a mocks of a class, this indicates to recursively inject the mocks inside of that class.
</summary>
    </member>
    <member name="P:FastMoq.Mocker.Strict">
      <summary>
Gets or sets a value indicating whether this <see cref="T:FastMoq.Mocker" /> is strict.
</summary>
      <remarks>
If strict, the mock
<see cref="T:System.IO.Abstractions.IFileSystem" /> does
not use <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileSystem" /> and uses <see cref="T:FastMoq.MockModel`1.Mock" /> of <see cref="T:System.IO.Abstractions.IFileSystem" />.
Gets or sets a value indicating whether this <see cref="T:FastMoq.Mocker" /> is strict. If strict, the mock
<see cref="T:FastMoq.Mocker.HttpClient" /> does
not use the pre-built HttpClient and uses <see cref="T:FastMoq.MockModel`1.Mock" /> of <see cref="T:FastMoq.Mocker.HttpClient" />.
</remarks>
      <value>
        <c>true</c> if strict <see cref="T:System.IO.Abstractions.IFileSystem" /> resolution; otherwise, <c>false</c> uses the built-in virtual
<see cref="T:System.IO.Abstractions.TestingHelpers.MockFileSystem" />.
</value>
      <value>
        <c>true</c> if strict <see cref="T:FastMoq.Mocker.HttpClient" /> resolution; otherwise, <c>false</c> uses the built-in virtual
<see cref="T:FastMoq.Mocker.HttpClient" />.
</value>
    </member>
    <member name="M:FastMoq.Mocker.#ctor">
      <summary>
Initializes a new instance of the <see cref="T:FastMoq.Mocker" /> class.
</summary>
    </member>
    <member name="M:FastMoq.Mocker.#ctor(System.Collections.Generic.Dictionary{System.Type,FastMoq.InstanceModel})">
      <inheritdoc />
      <summary>
Initializes a new instance of the <see cref="T:FastMoq.Mocker" /> class using the specific typeMap.
The typeMap assists in resolution of interfaces to instances.
</summary>
      <param name="typeMap">The type map.</param>
    </member>
    <member name="M:FastMoq.Mocker.AddInjections``1(``0,System.Type)">
      <summary>
Adds the injections to the specified object properties and fields.
</summary>
      <typeparam name="T">The type.</typeparam>
      <param name="obj">The object.</param>
      <param name="referenceType">Override object type used for injection attribute references.</param>
      <returns>T.</returns>
    </member>
    <member name="M:FastMoq.Mocker.AddMock``1(Moq.Mock{``0},System.Boolean,System.Boolean)">
      <summary>
Creates a <see cref="T:FastMoq.MockModel`1" /> with the given <see cref="T:FastMoq.MockModel`1.Mock" /> with the option of overwriting an existing
<see cref="T:FastMoq.MockModel`1" /></summary>
      <typeparam name="T">The Mock <see cref="T:Type" />, usually an interface.</typeparam>
      <param name="mock">Mock to Add.</param>
      <param name="overwrite">
Overwrite if the mock exists or throw <see cref="T:System.ArgumentException" /> if this parameter is
false.
</param>
      <param name="nonPublic">if set to <c>true</c> uses public and non public constructors.</param>
      <returns>
        <see cref="T:FastMoq.MockModel&lt;T&gt;" />.</returns>
    </member>
    <member name="M:FastMoq.Mocker.AddType(System.Type,System.Type,System.Func{FastMoq.Mocker,System.Object},System.Boolean)">
      <summary>
Adds an interface to Class mapping to the <see cref="T:FastMoq.Mocker.typeMap" /> for easier resolution.
</summary>
      <param name="tInterface">The interface or class Type which can be mapped to a specific Class.</param>
      <param name="tClass">The Class Type (cannot be an interface) that can be created and assigned to <see cref="tInterface" />.</param>
      <param name="createFunc">An optional create function used to create the class.</param>
      <param name="replace">Replace type if already exists. Default: false.</param>
      <exception cref="T:System.ArgumentException">An item with the same key has already been added.</exception>
    </member>
    <member name="M:FastMoq.Mocker.AddType``2(System.Func{FastMoq.Mocker,``1},System.Boolean)">
      <summary>
Adds an interface to Class mapping to the <see cref="T:FastMoq.Mocker.typeMap" /> for easier resolution.
</summary>
      <typeparam name="TInterface">The interface or class Type which can be mapped to a specific Class.</typeparam>
      <typeparam name="TClass">The Class Type (cannot be an interface) that can be created and assigned to <see cref="TInterface" />.</typeparam>
      <param name="createFunc">An optional create function used to create the class.</param>
      <param name="replace">Replace type if already exists. Default: false.</param>
      <exception cref="T:System.ArgumentException">$"{typeof(TClass).Name} cannot be an interface."</exception>
      <exception cref="T:System.ArgumentException">$"{typeof(TClass).Name} is not assignable to {typeof(TInterface).Name}."</exception>
    </member>
    <member name="M:FastMoq.Mocker.Contains``1">
      <summary>
Determines whether this instance contains a Mock of <c>T</c>.
</summary>
      <typeparam name="T">The Mock <see cref="T:Type" />, usually an interface.</typeparam>
      <returns>
        <c>true</c> if the <c><![CDATA[Mock<T>]]></c> exists; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">type is null.</exception>
      <exception cref="T:System.ArgumentException">type must be a class. - type</exception>
    </member>
    <member name="M:FastMoq.Mocker.Contains(System.Type)">
      <summary>
Determines whether this instance contains the Mock of <c>type</c>.
</summary>
      <param name="type">The <see cref="T:Type" />, usually an interface.</param>
      <returns>
        <c>true</c> if <see cref="T:FastMoq.MockModel&lt;T&gt;.Mock" /> exists; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">type</exception>
      <exception cref="T:System.ArgumentException">type must be a class. - type</exception>
    </member>
    <member name="M:FastMoq.Mocker.CreateHttpClient(System.String,System.String,System.Net.HttpStatusCode,System.String)">
      <summary>
Creates the HTTP client.
</summary>
      <returns>
        <see cref="T:FastMoq.Mocker.HttpClient" />.</returns>
    </member>
    <member name="M:FastMoq.Mocker.CreateInstance``1(object?[])">
      <summary>
Creates an instance of <c>T</c>. Parameters allow matching of constructors and using those values in the creation
of the instance.
</summary>
      <typeparam name="T">The Mock <see cref="T:Type" />, usually an interface.</typeparam>
      <param name="args">The optional arguments used to create the instance.</param>
      <returns>
        <see cref="T:System.Nullable" />.</returns>
      <example>
        <code><![CDATA[
IFileSystem fileSystem = CreateInstance<IFileSystem>();
]]></code>
      </example>
    </member>
    <member name="M:FastMoq.Mocker.CreateInstance``2(System.Collections.Generic.Dictionary{System.Type,System.Object})">
      <summary>
Creates the instance.
</summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TParam1">The type of the t param1.</typeparam>
      <param name="data">The data.</param>
      <returns>T.</returns>
    </member>
    <member name="M:FastMoq.Mocker.CreateInstance``3(System.Collections.Generic.Dictionary{System.Type,System.Object})">
      <summary>
Creates the instance.
</summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TParam1">The type of the t param1.</typeparam>
      <typeparam name="TParam2">The type of the t param2.</typeparam>
      <param name="data">The data.</param>
      <returns>T.</returns>
    </member>
    <member name="M:FastMoq.Mocker.CreateInstance``4(System.Collections.Generic.Dictionary{System.Type,System.Object})">
      <summary>
Creates the instance.
</summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TParam1">The type of the t param1.</typeparam>
      <typeparam name="TParam2">The type of the t param2.</typeparam>
      <typeparam name="TParam3">The type of the t param3.</typeparam>
      <param name="data">The data.</param>
      <returns>T.</returns>
    </member>
    <member name="M:FastMoq.Mocker.CreateInstance``5(System.Collections.Generic.Dictionary{System.Type,System.Object})">
      <summary>
Creates the instance.
</summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TParam1">The type of the t param1.</typeparam>
      <typeparam name="TParam2">The type of the t param2.</typeparam>
      <typeparam name="TParam3">The type of the t param3.</typeparam>
      <typeparam name="TParam4">The type of the t param4.</typeparam>
      <param name="data">The data.</param>
      <returns>T.</returns>
    </member>
    <member name="M:FastMoq.Mocker.CreateInstance``6(System.Collections.Generic.Dictionary{System.Type,System.Object})">
      <summary>
Creates the instance.
</summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TParam1">The type of the t param1.</typeparam>
      <typeparam name="TParam2">The type of the t param2.</typeparam>
      <typeparam name="TParam3">The type of the t param3.</typeparam>
      <typeparam name="TParam4">The type of the t param4.</typeparam>
      <typeparam name="TParam5">The type of the t param5.</typeparam>
      <param name="data">The data.</param>
      <returns>T.</returns>
    </member>
    <member name="M:FastMoq.Mocker.CreateInstance``7(System.Collections.Generic.Dictionary{System.Type,System.Object})">
      <summary>
Creates the instance.
</summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TParam1">The type of the t param1.</typeparam>
      <typeparam name="TParam2">The type of the t param2.</typeparam>
      <typeparam name="TParam3">The type of the t param3.</typeparam>
      <typeparam name="TParam4">The type of the t param4.</typeparam>
      <typeparam name="TParam5">The type of the t param5.</typeparam>
      <typeparam name="TParam6">The type of the t param6.</typeparam>
      <param name="data">The data.</param>
      <returns>T.</returns>
    </member>
    <member name="M:FastMoq.Mocker.CreateInstance``8(System.Collections.Generic.Dictionary{System.Type,System.Object})">
      <summary>
Creates the instance.
</summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TParam1">The type of the t param1.</typeparam>
      <typeparam name="TParam2">The type of the t param2.</typeparam>
      <typeparam name="TParam3">The type of the t param3.</typeparam>
      <typeparam name="TParam4">The type of the t param4.</typeparam>
      <typeparam name="TParam5">The type of the t param5.</typeparam>
      <typeparam name="TParam6">The type of the t param6.</typeparam>
      <typeparam name="TParam7">The type of the t param7.</typeparam>
      <param name="data">The arguments.</param>
      <returns>T.</returns>
    </member>
    <member name="M:FastMoq.Mocker.CreateInstance``9(System.Collections.Generic.Dictionary{System.Type,System.Object})">
      <summary>
Creates the instance.
</summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TParam1">The type of the t param1.</typeparam>
      <typeparam name="TParam2">The type of the t param2.</typeparam>
      <typeparam name="TParam3">The type of the t param3.</typeparam>
      <typeparam name="TParam4">The type of the t param4.</typeparam>
      <typeparam name="TParam5">The type of the t param5.</typeparam>
      <typeparam name="TParam6">The type of the t param6.</typeparam>
      <typeparam name="TParam7">The type of the t param7.</typeparam>
      <typeparam name="TParam8">The type of the t param8.</typeparam>
      <param name="data">The arguments.</param>
      <returns>T.</returns>
    </member>
    <member name="M:FastMoq.Mocker.CreateInstance``1(System.Boolean)">
      <summary>
Creates an instance of <see cref="T:System.IO.Abstractions.IFileSystem" />.
</summary>
      <typeparam name="T">
        <see cref="T:System.IO.Abstractions.IFileSystem" />.</typeparam>
      <param name="usePredefinedFileSystem">if set to <c>true</c> [use predefined file system].</param>
      <returns>
        <see cref="T:System.Nullable" />.</returns>
    </member>
    <member name="M:FastMoq.Mocker.CreateInstance``1(System.Boolean,object?[])">
      <summary>
Creates the instance.
</summary>
      <typeparam name="T">The Mock <see cref="T:Type" />, usually an interface.</typeparam>
      <param name="usePredefinedFileSystem">if set to <c>true</c> [use predefined file system].</param>
      <param name="args">The arguments.</param>
      <returns>
        <see cref="T:System.Nullable" />.</returns>
    </member>
    <member name="M:FastMoq.Mocker.CreateInstanceNonPublic``1(object?[])">
      <summary>
Creates an instance of <c>T</c>.
Non public constructors are included as options for creating the instance.
Parameters allow matching of constructors and using those values in the creation of the instance.
</summary>
      <typeparam name="T">The Mock <see cref="T:Type" />, usually an interface.</typeparam>
      <param name="args">The arguments.</param>
      <returns>
        <see cref="T:System.Nullable" />
      </returns>
      <example>
        <code><![CDATA[
IModel model = CreateInstanceNonPublic<IModel>();
]]></code>
      </example>
    </member>
    <member name="M:FastMoq.Mocker.CreateInstanceNonPublic(System.Type,object?[])">
      <summary>
Creates the instance non public.
</summary>
      <param name="type">The type.</param>
      <param name="args">The arguments.</param>
      <returns>System.Nullable&lt;System.Object&gt;.</returns>
    </member>
    <member name="M:FastMoq.Mocker.CreateMock(System.Type,System.Boolean)">
      <summary>
Creates the <see cref="T:FastMoq.MockModel`1" /> from the <c>Type</c>. This throws an exception if the mock already exists.
</summary>
      <param name="type">The type.</param>
      <param name="nonPublic">
        <c>true</c> if non public and public constructors are used.</param>
      <returns>
        <see cref="T:System.Collections.Generic.List&lt;T&gt;" />.</returns>
      <exception cref="T:System.ArgumentException">type must be a class. - type</exception>
      <exception cref="T:System.ApplicationException">Cannot create instance.</exception>
    </member>
    <member name="M:FastMoq.Mocker.CreateMock``1(System.Boolean)">
      <summary>
Creates the <see cref="T:FastMoq.MockModel`1" /> from the type <c>T</c>. This throws an exception if the mock already exists.
</summary>
      <typeparam name="T">The Mock <see cref="T:Type" />, usually an interface.</typeparam>
      <param name="nonPublic">if set to <c>true</c> public and non public constructors are used.</param>
      <returns>
        <see cref="T:System.Collections.Generic.List&lt;T&gt;" />.</returns>
      <exception cref="T:System.ArgumentException">type must be a class. - type</exception>
      <exception cref="T:System.ArgumentException">type already exists. - type</exception>
      <exception cref="T:System.ApplicationException">Cannot create instance.</exception>
    </member>
    <member name="M:FastMoq.Mocker.CreateMockInstance(System.Type,System.Boolean)">
      <summary>
Creates the mock instance that is not automatically injected.
</summary>
      <param name="type">The type.</param>
      <param name="nonPublic">if set to <c>true</c> [non public].</param>
      <returns>Mock.</returns>
      <exception cref="T:System.ArgumentException">type must be a class. - type</exception>
      <exception cref="T:System.ApplicationException">Cannot create instance.</exception>
    </member>
    <member name="M:FastMoq.Mocker.CreateMockInstance``1(System.Boolean)">
      <summary>
Creates the mock instance that is not automatically injected.
</summary>
      <typeparam name="T">
      </typeparam>
      <param name="nonPublic">if set to <c>true</c> [non public].</param>
      <returns>Mock.</returns>
      <exception cref="T:System.ArgumentException">type must be a class. - type</exception>
      <exception cref="T:System.ApplicationException">Cannot create instance.</exception>
    </member>
    <member name="M:FastMoq.Mocker.GetArgData``1(System.Collections.Generic.Dictionary{System.Type,System.Object})">
      <summary>
Gets the argument data.
</summary>
      <typeparam name="T">
      </typeparam>
      <param name="data">The data.</param>
      <returns>System.Nullable&lt;System.Object&gt;[].</returns>
    </member>
    <member name="M:FastMoq.Mocker.GetContentBytes(System.Net.Http.HttpContent)">
      <summary>
Gets the content bytes.
</summary>
      <param name="content">The content.</param>
      <returns>byte[].</returns>
    </member>
    <member name="M:FastMoq.Mocker.GetContentStream(System.Net.Http.HttpContent)">
      <summary>
Gets the content stream.
</summary>
      <param name="content">The content.</param>
      <returns>System.IO.Stream.</returns>
    </member>
    <member name="M:FastMoq.Mocker.GetDefaultValue(System.Type)">
      <summary>
Gets the default value.
</summary>
      <param name="type">The type.</param>
      <returns>
        <see cref="T:System.Nullable" />.</returns>
    </member>
    <member name="M:FastMoq.Mocker.GetList``1(System.Int32,System.Func{System.Int32,``0},System.Action{System.Int32,``0})">
      <summary>
Gets a list with the specified number of list items, using a custom function.
</summary>
      <typeparam name="T">The Mock <see cref="T:Type" />, usually an interface.</typeparam>
      <param name="count">The number of list items.</param>
      <param name="func">The function for creating the list items.</param>
      <param name="initAction">The initialize action.</param>
      <returns>
        <see cref="T:System.Collections.Generic.List&lt;T&gt;" />.</returns>
      <example>
Example of how to create a list.
<code><![CDATA[
GetList<Model>(3, (i) => new Model(name: i.ToString()));
]]></code>
or
<code><![CDATA[
GetList<IModel>(3, (i) => Mocks.CreateInstance<IModel>(i));
]]></code></example>
    </member>
    <member name="M:FastMoq.Mocker.GetList``1(System.Int32,System.Func{System.Int32,``0})">
      <summary>
Gets a list with the specified number of list items, using a custom function.
</summary>
      <typeparam name="T">The Mock <see cref="T:Type" />, usually an interface.</typeparam>
      <param name="count">The number of list items.</param>
      <param name="func">The function for creating the list items.</param>
      <returns>
        <see cref="T:System.Collections.Generic.List&lt;T&gt;" />.</returns>
      <example>
Example of how to create a list.
<code><![CDATA[
GetList<Model>(3, (i) => new Model(name: i.ToString()));
]]></code>
or
<code><![CDATA[
GetList<IModel>(3, (i) => Mocks.CreateInstance<IModel>(i));
]]></code></example>
    </member>
    <member name="M:FastMoq.Mocker.GetList``1(System.Int32,System.Func{``0})">
      <summary>
Gets a list with the specified number of list items, using a custom function.
</summary>
      <typeparam name="T">The Mock <see cref="T:Type" />, usually an interface.</typeparam>
      <param name="count">The number of list items.</param>
      <param name="func">The function for creating the list items.</param>
      <returns>
        <see cref="T:System.Collections.Generic.List&lt;T&gt;" />.</returns>
      <example>
Example of how to create a list.
<code><![CDATA[
GetList<Model>(3, () => new Model(name: Guid.NewGuid().ToString()));
]]></code>
or
<code><![CDATA[
GetList<IModel>(3, () => Mocks.CreateInstance<IModel>());
]]></code></example>
    </member>
    <member name="M:FastMoq.Mocker.GetMethodArgData(System.Reflection.MethodInfo,System.Collections.Generic.Dictionary{System.Type,System.Object})">
      <summary>
Gets the method argument data.
</summary>
      <param name="method">The method.</param>
      <param name="data">The data.</param>
      <returns>System.Nullable&lt;System.Object&gt;[].</returns>
    </member>
    <member name="M:FastMoq.Mocker.GetMock``1">
      <summary>
Gets or creates the mock of type <c>T</c>.
</summary>
      <typeparam name="T">The Mock <see cref="T:Type" />, usually an interface.</typeparam>
      <returns>
        <see cref="T:FastMoq.MockModel&lt;T&gt;.Mock" />.</returns>
    </member>
    <member name="M:FastMoq.Mocker.GetMock(System.Type)">
      <summary>
Gets of creates the mock of <c>type</c>.
</summary>
      <param name="type">The type.</param>
      <returns>
        <see cref="T:FastMoq.MockModel`1.Mock" />.</returns>
    </member>
    <member name="M:FastMoq.Mocker.GetObject(System.Reflection.ParameterInfo)">
      <summary>
Gets the instance for the given <see cref="T:System.Reflection.ParameterInfo" />.
</summary>
      <param name="info">The <see cref="T:System.Reflection.ParameterInfo" />.</param>
      <returns>
        <see cref="T:System.Nullable" />
      </returns>
      <exception cref="T:System.ArgumentNullException">type</exception>
      <exception cref="T:System.InvalidProgramException">Unable to get the Mock.</exception>
    </member>
    <member name="M:FastMoq.Mocker.GetObject(System.Type,System.Action{System.Object})">
      <summary>
Gets the instance for the given <c>type</c>.
</summary>
      <param name="type">The type.</param>
      <param name="initAction">The initialize action.</param>
      <returns>
        <see cref="T:System.Nullable" />.</returns>
      <exception cref="T:System.ArgumentNullException">type</exception>
      <exception cref="T:System.InvalidProgramException">Unable to get the Mock.</exception>
    </member>
    <member name="M:FastMoq.Mocker.GetObject``1(System.Action{``0})">
      <summary>
Gets the instance for the given <c>T</c> and runs the given function against the object.
</summary>
      <typeparam name="T">The Mock <see cref="T:Type" />, usually an interface.</typeparam>
      <param name="initAction">The initialize action.</param>
      <returns>
        <c>T</c>.</returns>
    </member>
    <member name="M:FastMoq.Mocker.GetObject``1">
      <summary>
Gets the object.
</summary>
      <typeparam name="T">
      </typeparam>
      <returns>System.Nullable&lt;T&gt;.</returns>
    </member>
    <member name="M:FastMoq.Mocker.GetObject``1(object?[])">
      <summary>
Gets the object.
</summary>
      <typeparam name="T">
      </typeparam>
      <param name="args">The arguments.</param>
      <returns>T.</returns>
    </member>
    <member name="M:FastMoq.Mocker.GetRequiredMock(System.Type)">
      <summary>
Gets the required mock.
</summary>
      <param name="type">The mock type, usually an interface.</param>
      <returns>Mock.</returns>
      <exception cref="T:System.ArgumentException">type must be a class. - type</exception>
      <exception cref="T:System.InvalidOperationException">type must be a class. - type</exception>
    </member>
    <member name="M:FastMoq.Mocker.GetRequiredMock``1">
      <summary>
Gets the required mock.
</summary>
      <typeparam name="T">The Mock <see cref="T:Type" />, usually an interface.</typeparam>
      <returns>
        <see cref="T:FastMoq.MockModel&lt;T&gt;.Mock" />.</returns>
      <exception cref="T:System.ArgumentException">type must be a class. - type</exception>
      <exception cref="T:System.InvalidOperationException">Mock must exist. - type</exception>
    </member>
    <member name="M:FastMoq.Mocker.GetStringContent(System.Net.Http.HttpContent)">
      <summary>
Gets the content of the string.
</summary>
      <param name="content">The content.</param>
      <returns>string.</returns>
    </member>
    <member name="M:FastMoq.Mocker.Initialize``1(System.Action{Moq.Mock{``0}},System.Boolean)">
      <summary>
Gets or Creates then Initializes the specified Mock of <c>T</c>.
</summary>
      <typeparam name="T">The Mock <see cref="T:Type" />, usually an interface.</typeparam>
      <param name="action">The action.</param>
      <param name="reset">
        <c>False to keep the existing setup.</c>
      </param>
      <returns>
        <see cref="T:FastMoq.MockModel&lt;T&gt;.Mock" />
      </returns>
      <exception cref="T:System.InvalidOperationException">Invalid Mock.</exception>
      <example>
Example of how to set up for mocks that require specific functionality.
<code><![CDATA[
mocks.Initialize<ICarService>(mock => {
mock.Setup(x => x.StartCar).Returns(true));
mock.Setup(x => x.StopCar).Returns(false));
}
]]></code></example>
    </member>
    <member name="M:FastMoq.Mocker.InvokeMethod``1(System.String,System.Boolean,object?[])">
      <summary>
Invokes the static method.
</summary>
      <typeparam name="TClass">The type of the t class.</typeparam>
      <param name="methodName">Name of the method.</param>
      <param name="nonPublic">if set to <c>true</c> [non public].</param>
      <param name="args">The arguments.</param>
      <returns>
        <see cref="T:System.Nullable" />.</returns>
    </member>
    <member name="M:FastMoq.Mocker.InvokeMethod``1(``0,System.String,System.Boolean,object?[])">
      <summary>
Invokes the method.
</summary>
      <typeparam name="TClass">The type of the t class.</typeparam>
      <param name="obj">The object.</param>
      <param name="methodName">Name of the method.</param>
      <param name="nonPublic">if set to <c>true</c> [non public].</param>
      <param name="args">The arguments.</param>
      <returns>
        <see cref="T:System.Nullable" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:FastMoq.Mocker.RemoveMock``1(Moq.Mock{``0})">
      <summary>
Remove specified Mock of <c>T</c>.
</summary>
      <typeparam name="T">The Mock <see cref="T:Type" />, usually an interface.</typeparam>
      <param name="mock">Mock to Remove.</param>
      <returns>
        <c>true</c> if the mock is successfully removed, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:FastMoq.Mocker.SetupHttpMessage(System.Func{System.Net.Http.HttpResponseMessage},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
Setups the HTTP message.
</summary>
      <param name="messageFunc">The message function.</param>
      <param name="request">The request.</param>
      <param name="cancellationToken">The cancellation token.</param>
    </member>
    <member name="M:FastMoq.Mocker.SetupMessage``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``1})">
      <summary>
Setups the message.
</summary>
      <typeparam name="TMock">The type of the mock.</typeparam>
      <typeparam name="TReturn">The type of the return value.</typeparam>
      <param name="expression">The expression.</param>
      <param name="messageFunc">The message function.</param>
    </member>
    <member name="M:FastMoq.Mocker.SetupMessageAsync``2(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Func{``1})">
      <summary>
Setups the message asynchronous.
</summary>
      <typeparam name="TMock">The type of the mock.</typeparam>
      <typeparam name="TReturn">The type of the return value.</typeparam>
      <param name="expression">The expression.</param>
      <param name="messageFunc">The message function.</param>
    </member>
    <member name="M:FastMoq.Mocker.SetupMessageProtected``2(System.String,System.Func{``1},object[]?)">
      <summary>
Setups the message protected.
</summary>
      <typeparam name="TMock">The type of the mock.</typeparam>
      <typeparam name="TReturn">The type of the return value.</typeparam>
      <param name="methodOrPropertyName">Name of the method or property.</param>
      <param name="messageFunc">The message function.</param>
      <param name="args">The arguments.</param>
    </member>
    <member name="M:FastMoq.Mocker.SetupMessageProtectedAsync``2(System.String,System.Func{``1},object[]?)">
      <summary>
Setups the message protected asynchronous.
</summary>
      <typeparam name="TMock">The type of the mock.</typeparam>
      <typeparam name="TReturn">The type of the return value.</typeparam>
      <param name="methodOrPropertyName">Name of the method or property.</param>
      <param name="messageFunc">The message function.</param>
      <param name="args">The arguments.</param>
    </member>
    <member name="T:FastMoq.MockerTestBase`1">
      <summary>
       Auto Mocking Test Base with Fast Automatic Mocking <see cref="T:FastMoq.Mocker" />.
   </summary>
      <example>
       Basic example of the base class creating the Car class and auto mocking ICarService.
      <code><![CDATA[
   public class CarTest : MockerTestBase<Car> {
        [Fact]
        public void TestCar() {
            Component.Color.Should().Be(Color.Green);
            Component.CarService.Should().NotBeNull();
        }
   }
  
   public class Car {
        public Color Color { get; set; } = Color.Green;
        public ICarService CarService { get; }
        public Car(ICarService carService) => CarService = carService;
   }
  
   public interface ICarService
   {
        Color Color { get; set; }
        ICarService CarService { get; }
        bool StartCar();
   }
    ]]></code>
       Example of how to set up for mocks that require specific functionality.
      <code><![CDATA[
   public class CarTest : MockerTestBase<Car> {
        public CarTest() : base(mocks => {
                mocks.Initialize<ICarService>(mock => mock.Setup(x => x.StartCar).Returns(true));
        }
   }
    ]]></code></example>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <inheritdoc />
    </member>
    <member name="P:FastMoq.MockerTestBase`1.Component">
      <summary>
       Gets or sets the component under test.
   </summary>
      <value>The service.</value>
    </member>
    <member name="P:FastMoq.MockerTestBase`1.CustomMocks">
      <summary>
       Gets or sets the custom mocks. These are added whenever the component is created.
   </summary>
      <value>The custom mocks.</value>
    </member>
    <member name="P:FastMoq.MockerTestBase`1.CreateComponentAction">
      <summary>
       Gets or sets the create component action. This action is run whenever the component is created.
   </summary>
      <value>The create component action.</value>
    </member>
    <member name="P:FastMoq.MockerTestBase`1.SetupMocksAction">
      <summary>
       Gets or sets the setup mocks action. This action is run before the component is created.
   </summary>
      <value>The setup mocks action.</value>
    </member>
    <member name="P:FastMoq.MockerTestBase`1.CreatedComponentAction">
      <summary>
       Gets or sets the created component action. This action is run after the component is created.
   </summary>
      <value>The created component action.</value>
    </member>
    <member name="P:FastMoq.MockerTestBase`1.Mocks">
      <summary>
       Gets the <see cref="T:FastMoq.Mocker" />.
   </summary>
      <value>The mocks.</value>
    </member>
    <member name="M:FastMoq.MockerTestBase`1.#ctor">
      <inheritdoc />
      <summary>
       Initializes a new instance of the <see cref="T:FastMoq.MockerTestBase`1" /> class with the default createAction.
   </summary>
    </member>
    <member name="M:FastMoq.MockerTestBase`1.#ctor(Action{Mocker})">
      <inheritdoc />
      <summary>
       Initializes a new instance of the <see cref="T:FastMoq.MockerTestBase`1" /> class with a setup action.
   </summary>
      <param name="setupMocksAction">The setup mocks action.</param>
    </member>
    <member name="M:FastMoq.MockerTestBase`1.#ctor(Action{Mocker},Func{Mocker, `0})">
      <summary>
       Initializes a new instance of the <see cref="T:FastMoq.MockerTestBase`1" /> class.
   </summary>
      <param name="setupMocksAction">The setup mocks action.</param>
      <param name="createComponentAction">The create component action.</param>
      <inheritdoc />
    </member>
    <member name="M:FastMoq.MockerTestBase`1.#ctor(System.Nullable{Action{Mocker}},System.Nullable{Action{System.Nullable{`0}}})">
      <summary>
       Initializes a new instance of the <see cref="T:FastMoq.MockerTestBase`1" /> class.
   </summary>
      <param name="setupMocksAction">The setup mocks action.</param>
      <param name="createdComponentAction">The created component action.</param>
      <inheritdoc />
    </member>
    <member name="M:FastMoq.MockerTestBase`1.#ctor(Func{Mocker, `0},System.Nullable{Action{System.Nullable{`0}}})">
      <inheritdoc />
      <summary>
       Initializes a new instance of the <see cref="T:FastMoq.MockerTestBase`1" /> class with a create action and optional
       createdAction.
   </summary>
      <param name="createComponentAction">The create component action.</param>
      <param name="createdComponentAction">The created component action.</param>
    </member>
    <member name="M:FastMoq.MockerTestBase`1.#ctor(System.Nullable{Action{Mocker}},System.Nullable{Func{Mocker, System.Nullable{`0}}},System.Nullable{Action{System.Nullable{`0}}})">
      <summary>
       Initializes a new instance of the <see cref="T:FastMoq.MockerTestBase`1" /> class.
   </summary>
      <param name="setupMocksAction">The setup mocks action.</param>
      <param name="createComponentAction">The create component action.</param>
      <param name="createdComponentAction">The created component action.</param>
    </member>
    <member name="M:FastMoq.MockerTestBase`1.WaitFor``1(Func{``0},TimeSpan,TimeSpan)">
      <summary>
       Waits for an action.
   </summary>
      <typeparam name="T">Logic of T.</typeparam>
      <param name="logic">The action.</param>
      <param name="timespan">The maximum time to wait.</param>
      <param name="waitBetweenChecks">Time between each check.</param>
      <returns>T.</returns>
      <exception cref="T:System.ArgumentNullException">logic</exception>
    </member>
    <member name="M:FastMoq.MockerTestBase`1.WaitFor``1(Func{``0})">
      <summary>
       Waits for an action.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="logic">The action.</param>
      <returns>T.</returns>
      <exception cref="T:System.ArgumentNullException">logic</exception>
    </member>
    <member name="M:FastMoq.MockerTestBase`1.WaitFor``1(Func{``0},TimeSpan)">
      <summary>
       Waits for an action.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="logic">The action.</param>
      <param name="timespan">The timespan, defaults to 4 seconds.</param>
      <returns>T.</returns>
      <exception cref="T:System.ArgumentNullException">logic</exception>
    </member>
    <member name="M:FastMoq.MockerTestBase`1.CreateComponent">
      <summary>
       Sets the <see cref="P:FastMoq.MockerTestBase`1.Component" /> property with a new instance while maintaining the constructor setup and any
       other changes.
   </summary>
      <example>
       CreateComponent allows creating the component when desired, instead of in the base class constructor.
      <code><![CDATA[
   public void Test() {
       Mocks.Initialize<ICarService>(mock => mock.Setup(x => x.StartCar).Returns(true));
       CreateComponent();
   }
   ]]></code></example>
    </member>
    <member name="M:FastMoq.MockerTestBase`1.Dispose(System.Boolean)">
      <summary>
       Releases unmanaged and - optionally - managed resources.
   </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
       unmanaged resources.
   </param>
    </member>
    <member name="M:FastMoq.MockerTestBase`1.TestMethodParametersAsync(Expression{Func{`0, System.Object}},Action{Func{Task}, System.Nullable{System.String}, System.Nullable{List{System.Nullable{System.Object}}}, ParameterInfo},System.Nullable{System.Object}[])">
      <summary>
       Tests the asynchronous function.
   </summary>
      <param name="funcMethod">The function.</param>
      <param name="resultAction">The result action.</param>
      <param name="args">The arguments.</param>
    </member>
    <member name="M:FastMoq.MockerTestBase`1.TestMethodParametersAsync(MethodInfo,Action{Func{System.Nullable{Task}}, System.Nullable{System.String}, System.Nullable{List{System.Nullable{System.Object}}}, ParameterInfo},System.Nullable{System.Object}[])">
      <summary>
       Tests the method parameters asynchronous.
   </summary>
      <param name="methodInfo">The method information.</param>
      <param name="resultAction">The result action.</param>
      <param name="args">The arguments.</param>
      <exception cref="T:System.ArgumentNullException">methodInfo</exception>
      <exception cref="T:System.ArgumentNullException">resultAction</exception>
    </member>
    <member name="T:FastMoq.MockModel`1">
      <summary>
       Class MockModel.
       Implements the <see cref="T:FastMoq.MockModel" /></summary>
      <typeparam name="T">
      </typeparam>
      <seealso cref="T:FastMoq.MockModel" />
      <inheritdoc cref="T:FastMoq.MockModel" />
    </member>
    <member name="T:FastMoq.MockModel">
      <summary>
       Contains Mock and Type information.
   </summary>
    </member>
    <member name="P:FastMoq.MockModel`1.Mock">
      <summary>
       Gets or sets the mock.
   </summary>
      <value>The mock.</value>
    </member>
    <member name="M:FastMoq.MockModel`1.Equals(System.Nullable{System.Object})">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.MockModel`1.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.MockModel`1.CompareTo(System.Nullable{System.Object})">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.MockModel`1.CompareTo(System.Nullable{MockModel{`0}})">
      <inheritdoc />
    </member>
    <member name="P:FastMoq.MockModel.Mock">
      <summary>
       Gets or sets the mock.
   </summary>
      <value>The mock.</value>
    </member>
    <member name="P:FastMoq.MockModel.Type">
      <summary>
       Gets or sets the type.
   </summary>
      <value>The type.</value>
    </member>
    <member name="P:FastMoq.MockModel.NonPublic">
      <summary>
       Gets or sets a value indicating whether [non public].
   </summary>
      <value>
        <c>true</c> if [non public]; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:FastMoq.MockModel.Equals(System.Nullable{System.Object})">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.MockModel.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.MockModel.ToString">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.MockModel.CompareTo(System.Nullable{System.Object})">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.MockModel.CompareTo(System.Nullable{MockModel})">
      <inheritdoc />
    </member>
    <member name="T:FastMoq.TestClassExtensions">
      <summary>
   Class TestClassExtensions.
   </summary>
    </member>
    <member name="M:FastMoq.TestClassExtensions.GetField``1(``0,System.String)">
      <summary>
   Gets the field.
   </summary>
      <typeparam name="TObject">The type of the t object.</typeparam>
      <param name="obj">The object.</param>
      <param name="name">The name.</param>
      <returns>
        <see cref="Nullable{FieldInfo}" />.</returns>
    </member>
    <member name="M:FastMoq.TestClassExtensions.GetFieldInfo``1(System.Object,System.String)">
      <summary>
   Gets the field information.
   </summary>
      <typeparam name="TType">The type of the t type.</typeparam>
      <param name="obj">The object.</param>
      <param name="name">The name.</param>
      <returns>System.Nullable&lt;FieldInfo&gt;.</returns>
    </member>
    <member name="M:FastMoq.TestClassExtensions.GetFieldValue``2(System.Nullable{System.Object},System.String)">
      <summary>
   Gets the field value.
   </summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TType">The type of the t type.</typeparam>
      <param name="obj">The object.</param>
      <param name="name">The name.</param>
      <returns>System.Nullable&lt;T&gt;.</returns>
    </member>
    <member name="M:FastMoq.TestClassExtensions.GetFieldValue``1(System.Nullable{System.Object},FieldInfo)">
      <summary>
   Gets the field value.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="obj">The object.</param>
      <param name="field">The field.</param>
      <returns>System.Nullable&lt;T&gt;.</returns>
    </member>
    <member name="M:FastMoq.TestClassExtensions.GetFieldValue``1(``0,System.String,System.Nullable{``0})">
      <summary>
   Gets the field value.
   </summary>
      <typeparam name="TObject">The type of the t object.</typeparam>
      <param name="obj">The object.</param>
      <param name="name">The name.</param>
      <param name="defaultValue">The default value.</param>
      <returns>
        <see cref="Nullable{Object}" />.</returns>
    </member>
    <member name="M:FastMoq.TestClassExtensions.GetMember``2(``0,Expression{Func{``0, ``1}})">
      <summary>
   Gets the property value based on lambda.
   </summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TValue">The type of the t value.</typeparam>
      <param name="_">The object.</param>
      <param name="memberLambda">The member lambda.</param>
      <returns>System.Nullable&lt;TValue&gt;.</returns>
    </member>
    <member name="M:FastMoq.TestClassExtensions.GetMethod``1(``0,System.String)">
      <summary>
   Gets the method.
   </summary>
      <typeparam name="TObject">The type of the t object.</typeparam>
      <param name="obj">The object.</param>
      <param name="name">The name.</param>
      <returns>
        <see cref="Nullable{MethodInfo}" />.</returns>
    </member>
    <member name="M:FastMoq.TestClassExtensions.GetMethodValue``1(``0,System.String,System.Nullable{System.Object},System.Object[])">
      <summary>
   Gets the method value.
   </summary>
      <typeparam name="TObject">The type of the t object.</typeparam>
      <param name="obj">The object.</param>
      <param name="name">The name.</param>
      <param name="defaultValue">The default value.</param>
      <param name="args">The arguments.</param>
      <returns>System.Nullable&lt;System.Object&gt;.</returns>
    </member>
    <member name="M:FastMoq.TestClassExtensions.GetProperty``1(``0,System.String)">
      <summary>
   Gets the property.
   </summary>
      <typeparam name="TObject">The type of the t object.</typeparam>
      <param name="obj">The object.</param>
      <param name="name">The name.</param>
      <returns>
        <see cref="Nullable{PropertyInfo}" />.</returns>
    </member>
    <member name="M:FastMoq.TestClassExtensions.GetPropertyValue``1(``0,System.String,System.Nullable{System.Object})">
      <summary>
   Gets the property value.
   </summary>
      <typeparam name="TObject">The type of the t object.</typeparam>
      <param name="obj">The object.</param>
      <param name="name">The name.</param>
      <param name="defaultValue">The default value.</param>
      <returns>
        <see cref="Nullable{Object}" />.</returns>
    </member>
    <member name="M:FastMoq.TestClassExtensions.SetFieldValue``1(``0,System.String,System.Nullable{System.Object})">
      <summary>
   Sets the field value.
   </summary>
      <typeparam name="TObject">The type of the t object.</typeparam>
      <param name="obj">The object.</param>
      <param name="name">The name.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:FastMoq.TestClassExtensions.SetPropertyValue``1(``0,System.String,System.Nullable{System.Object})">
      <summary>
   Sets the property value.
   </summary>
      <typeparam name="TObject">The type of the t object.</typeparam>
      <param name="obj">The object.</param>
      <param name="name">The name.</param>
      <param name="value">The value.</param>
    </member>
    <member name="T:FastMoq.Collections.MockerObservableCollectionChangedEventArgs">
      <inheritdoc />
    </member>
    <member name="P:FastMoq.Collections.MockerObservableCollectionChangedEventArgs.NotifyCollectionChangedEventArgs">
      <summary>
       Gets the notify collection changed event arguments.
   </summary>
      <value>The notify collection changed event arguments.</value>
    </member>
    <member name="P:FastMoq.Collections.MockerObservableCollectionChangedEventArgs.PropertyChangedEventArgs">
      <summary>
       Gets the property changed event arguments.
   </summary>
      <value>The property changed event arguments.</value>
    </member>
    <member name="M:FastMoq.Collections.MockerObservableCollectionChangedEventArgs.#ctor(System.Nullable{NotifyCollectionChangedEventArgs})">
      <summary>
       Initializes a new instance of the <see cref="T:FastMoq.Collections.MockerObservableCollectionChangedEventArgs" /> class.
   </summary>
      <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:FastMoq.Collections.MockerObservableCollectionChangedEventArgs.#ctor(System.Nullable{PropertyChangedEventArgs})">
      <summary>
       Initializes a new instance of the <see cref="T:FastMoq.Collections.MockerObservableCollectionChangedEventArgs" /> class.
   </summary>
      <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="T:FastMoq.Collections.MockerObservableCollection`1">
      <inheritdoc />
    </member>
    <member name="F:FastMoq.Collections.MockerObservableCollection`1.Changed">
      <summary>
       Occurs when the collection changes, either by adding or removing an item.
   </summary>
    </member>
    <member name="M:FastMoq.Collections.MockerObservableCollection`1.#ctor">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Collections.MockerObservableCollection`1.#ctor(IEnumerable{`0})">
      <exception cref="ArgumentNullException"> collection is a null reference </exception>
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Collections.MockerObservableCollection`1.OnChanged(System.Nullable{System.Object},System.Nullable{NotifyCollectionChangedEventArgs})">
      <summary>
       Handles the <see cref="E:Changed" /> event.
   </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:FastMoq.Collections.MockerObservableCollection`1.OnChanged(System.Nullable{System.Object},System.Nullable{PropertyChangedEventArgs})">
      <summary>
       Handles the <see cref="E:Changed" /> event.
   </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> instance containing the event data.</param>
    </member>
  </members>
</doc>