<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>FastMoq.Web</name>
  </assembly>
  <members>
    <member name="T:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1">
      <summary>
       Interface IMockerBlazorTestHelpers
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.ButtonClick(IElement,Func{System.Boolean},System.Nullable{TimeSpan})">
      <summary>
       Buttons the click.
   </summary>
      <param name="button">The button.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
      <exception cref="ArgumentNullException">button</exception>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.ButtonClick(System.String,Func{System.Boolean},System.Nullable{TimeSpan})">
      <summary>
       Buttons the click.
   </summary>
      <param name="cssSelector">The CSS selector.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.ButtonClick``1(System.String,Func{System.Boolean},IRenderedComponent{``0},System.Nullable{TimeSpan})">
      <summary>
       Buttons the click.
   </summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <param name="cssSelector">The CSS selector.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="startingComponent">The starting component.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.ButtonClick(Func{IElement, System.Boolean},Func{System.Boolean},System.Nullable{TimeSpan})">
      <summary>
       Buttons the click.
   </summary>
      <param name="cssSelector">The CSS selector.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
      <exception cref="ArgumentNullException">cssSelector</exception>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.ButtonClick``1(System.String,Func{System.Boolean},System.Nullable{TimeSpan})">
      <summary>
       Buttons the click.
   </summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <param name="cssSelector">The CSS selector.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
      <exception cref="ArgumentNullException">cssSelector</exception>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.ClickDropdownItem``1(IRenderedComponent{``0},System.String,System.String,Func{System.Boolean})">
      <summary>
       Clicks the dropdown item.
   </summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <param name="component">The component.</param>
      <param name="cssSelector">The CSS selector.</param>
      <param name="propName">Name of the property.</param>
      <param name="waitFunc">The wait function.</param>
      <returns>IRenderedComponent&lt;TComponent&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.ClickDropdownItem``1(System.String,Func{System.Boolean},System.String)">
      <summary>
       Clicks the dropdown item.
   </summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <param name="propName">Name of the property.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="cssDropdownSelector">The CSS dropdown selector.</param>
      <returns>IRenderedComponent&lt;DropdownList&lt;TKey, TValue&gt;&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.FindAllByTag(System.String)">
      <summary>
       Finds all by tag.
   </summary>
      <param name="tagName">Name of the tag.</param>
      <returns>IEnumerable&lt;IElement&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.FindById(System.String)">
      <summary>
       Finds the by identifier.
   </summary>
      <param name="id">The identifier.</param>
      <returns>IElement.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.GetComponent``1">
      <summary>
       Gets the component.
   </summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <returns>IRenderedComponent&lt;TComponent&gt;.</returns>
      <example>
       Get FetchData component. /&gt;
      <code language="cs"><![CDATA[
   var comp = GetComponent<FetchData>();
   ]]></code></example>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.GetComponent``1(Func{IRenderedComponent{``0}, System.Boolean})">
      <summary>
       Gets the component.
   </summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <param name="predicate">The predicate.</param>
      <returns>IRenderedComponent&lt;TComponent&gt;.</returns>
      <example>
       Get FetchData component with Id 1234. /&gt;
      <code language="cs"><![CDATA[
   var comp = GetComponent<FetchData>(x => x.ComponentId == 1234));
   ]]></code></example>
      <example>
       Get FetchData instance property. /&gt;
      <code language="cs"><![CDATA[
   var comp = GetComponent<FetchData>(x => x.Instance.IsRunning));
   ]]></code></example>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.GetComponent``1(Func{IElement, System.Boolean})">
      <summary>
       Gets the component.
   </summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <param name="predicate">The predicate.</param>
      <returns>IRenderedComponent&lt;TComponent&gt;.</returns>
      <example>
       Get FetchData component with inner html containing text. /&gt;
      <code language="cs"><![CDATA[
   var comp = GetComponent<FetchData>(element => element.InnerHtml.Contains("hello"));
   ]]></code></example>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.GetComponents``1(System.Nullable{Func{IRenderedComponent{``0}, System.Boolean}})">
      <summary>
       Gets the components.
   </summary>
      <typeparam name="TComponent">The type of the t of type.</typeparam>
      <param name="predicate">The where function.</param>
      <returns>List&lt;IRenderedComponent&lt;TComponent&gt;&gt;.</returns>
      <example>
       Get FetchData component with Id 1234. /&gt;
      <code language="cs"><![CDATA[
   var list = GetComponent<FetchData>(x => x.ComponentId == 1234));
   ]]></code></example>
      <example>
       Get FetchData instance property. /&gt;
      <code language="cs"><![CDATA[
   var list = GetComponent<FetchData>(x => x.Instance.IsRunning));
   ]]></code></example>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.GetComponents``1(System.Nullable{Func{IElement, System.Boolean}})">
      <summary>
       Gets the components.
   </summary>
      <typeparam name="TComponent">The type of the t of type.</typeparam>
      <param name="predicate">The predicate.</param>
      <returns>List&lt;IRenderedComponent&lt;TComponent&gt;&gt;.</returns>
      <example>
       Get FetchData component with inner html containing text. /&gt;
      <code language="cs"><![CDATA[
   var list = GetComponent<FetchData>(element => element.InnerHtml.Contains("hello"));
   ]]></code></example>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.GetInjections(Type)">
      <summary>
       Gets the injections.
   </summary>
      <param name="type">The type.</param>
      <returns>IEnumerable&lt;PropertyInfo&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.GetInjections``1">
      <summary>
       Gets the injections.
   </summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <returns>IEnumerable&lt;PropertyInfo&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.GetInjections(Type,Type)">
      <summary>
       Gets the injections.
   </summary>
      <param name="type">The type.</param>
      <param name="injectAttribute">The inject attribute.</param>
      <returns>IEnumerable&lt;PropertyInfo&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.InjectComponent(Type,Type)">
      <summary>
       Injects the component.
   </summary>
      <param name="type">The type.</param>
      <param name="injectAttribute">The inject attribute.</param>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.InjectComponent(Type)">
      <summary>
       Injects the component.
   </summary>
      <param name="type">The type.</param>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.InjectComponent``1">
      <summary>
       Injects the component.
   </summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.InjectComponent``2">
      <summary>
       Injects the component.
   </summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <typeparam name="TInjectAttribute">The type of the t inject attribute.</typeparam>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.IsExists(System.String,System.Boolean)">
      <summary>
       Determines whether the specified CSS selector is exists.
   </summary>
      <param name="cssSelector">The CSS selector.</param>
      <param name="throwOnNotExist">if set to <c>true</c> [throw on not exist].</param>
      <returns>
        <c>true</c> if the specified CSS selector is exists; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.RenderComponent(System.Boolean)">
      <summary>
       Renders the component. If the component is already rendered, it will act like a stateChanged.
   </summary>
      <param name="forceNew">if set to <c>true</c> [force new].</param>
      <returns>IRenderedComponent&lt;T&gt;.</returns>
      <example>
       Render again without losing context. This honors any parameters in the RenderParameters action. /&gt;
      <code language="cs"><![CDATA[
   RenderComponent()
   ]]></code></example>
      <example>
       Force initial render.
      <code language="cs"><![CDATA[
   RenderComponent(true);
   ]]></code></example>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.RenderComponent(Action{ComponentParameterCollectionBuilder{`0}},System.Boolean)">
      <summary>
       Renders the component. If the component is already rendered, it will act like a stateChanged.
   </summary>
      <param name="parameterBuilder">The parameter builder.</param>
      <param name="forceNew">if set to <c>true</c> [force new].</param>
      <returns>IRenderedComponent&lt;T&gt;.</returns>
      <example>
       Render again with parameters without losing context
      <code language="cs"><![CDATA[
   RenderComponent(b => b.Add(x => x.WeatherService, Mocks.GetObject<IWeatherForecastService>()));
   ]]></code></example>
      <example>
       Force initial render with parameters
      <code language="cs"><![CDATA[
   RenderComponent(b => b.Add(x => x.WeatherService, Mocks.GetObject<IWeatherForecastService>()), true);
   ]]></code></example>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.SetAutoComplete(System.String,System.String,Func{System.Boolean},System.String)">
      <summary>
       Sets the automatic complete.
   </summary>
      <param name="cssSelector">The CSS selector.</param>
      <param name="filterText">The filter text.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="itemCssSelector">The item CSS selector.</param>
      <returns>Task.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.SetElementCheck``1(System.String,System.Boolean,Func{System.Boolean},System.Nullable{TimeSpan},System.Nullable{IRenderedFragment})">
      <summary>
       Sets the element check.
   </summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <param name="cssSelector">The CSS selector.</param>
      <param name="isChecked">if set to <c>true</c> [is checked].</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <param name="startingPoint">The starting point.</param>
      <exception cref="ArgumentNullException">cssSelector</exception>
      <exception cref="T:Bunit.ElementNotFoundException">
      </exception>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.SetElementSwitch``1(System.String,System.Boolean,Func{System.Boolean},System.Nullable{TimeSpan},System.Nullable{IRenderedFragment})">
      <summary>
       Sets the element switch.
   </summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <param name="cssSelector">The CSS selector.</param>
      <param name="isChecked">if set to <c>true</c> [is checked].</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <param name="startingPoint">The starting point.</param>
      <exception cref="ArgumentNullException">cssSelector</exception>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.SetElementText(IElement,System.String,Func{System.Boolean},System.Nullable{TimeSpan})">
      <summary>
       Sets the element text.
   </summary>
      <param name="element">The element.</param>
      <param name="text">The text.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.SetElementText(System.String,System.String,Func{System.Boolean},System.Nullable{TimeSpan},System.Nullable{IRenderedFragment})">
      <summary>
       Sets the element text.
   </summary>
      <param name="cssSelector">The CSS selector.</param>
      <param name="text">The text.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <param name="startingPoint">The starting point.</param>
      <exception cref="ArgumentNullException">cssSelector</exception>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.WaitDelay(System.Nullable{TimeSpan})">
      <summary>
       Waits the delay time. Use only when absolutely needed. Prefer use of WaitForState, WaitForExists, or
       WaitForNotExists.
   </summary>
      <param name="waitTimeout">The wait timeout.</param>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.WaitForExists(System.String,System.Nullable{TimeSpan})">
      <summary>
       Waits for exists.
   </summary>
      <param name="cssSelector">The CSS selector.</param>
      <param name="waitTimeout">The wait timeout.</param>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.WaitForNotExists(System.String,System.Nullable{TimeSpan})">
      <summary>
       Waits for not exists.
   </summary>
      <param name="cssSelector">The CSS selector.</param>
      <param name="waitTimeout">The wait timeout.</param>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.WaitForState(Func{System.Boolean},System.Nullable{TimeSpan})">
      <summary>
       Waits for state.
   </summary>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="T:FastMoq.Web.Blazor.MockerBlazorTestBase`1">
      <summary>
       Class MockerBlazorTestBase.
   Implements the <see cref="T:Bunit.TestContext" />
   Implements the <see cref="T:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1" /></summary>
      <typeparam name="T">
      </typeparam>
      <seealso cref="T:Bunit.TestContext" />
      <seealso cref="T:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1" />
      <seealso cref="T:Microsoft.AspNetCore.Components.ComponentBase" />
      <inheritdoc cref="T:Bunit.TestContext" />
      <inheritdoc cref="T:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1" />
      <example>
   Basic Example
  <code language="cs"><![CDATA[
   public class IndexTests : MockerBlazorTestBase<Index>
   {
       [Fact]
       public void Create() => Component.Should().NotBeNull();
   }
   ]]></code></example>
      <example>
   Setup Services
  <code language="cs"><![CDATA[
   protected override Action<TestServiceProvider, IConfiguration, Mocker> ConfigureServices => (services, c, m) => services.AddSingleton<IWeatherForecastService, WeatherForecastService>();
   ]]></code></example>
      <example>
   Setup Roles.
  <code language="cs"><![CDATA[
   protected override MockerObservableCollection<string> AuthorizedRoles => new MockerObservableCollection<string>() { "Role1", "Role2"}
   ]]></code></example>
      <example>
   Setup Http Response Message
  <code language="cs"><![CDATA[
   protected override Action<Mocker> SetupComponent => mocker => mocker.SetupHttpMessage(() => new HttpResponseMessage { StatusCode = HttpStatusCode.OK, Content = new StringContent("ContextGoesHere")});
   ]]></code></example>
      <example>
   Setup Mocks
  <code language="cs"><![CDATA[
   protected override Action<Mocker> SetupComponent => mocker =>
   {
       mocker.GetMock<IFile>().Setup(f => f.Exists(It.IsAny<string>())).Returns(true); // Add setup
       mocker.Initialize<IDirectory>(mock => mock.Setup(d => d.Exists(It.IsAny<string>())).Returns(true)); // Clears existing mocks
       mocker.GetMock<IDirectory>().Setup(d=>d.Exists("C:\\testfile.txt")).Returns(false); // add setup
   };
   ]]></code></example>
      <example>
   Click Button by class, tag, or id.
  <code language="cs"><![CDATA[
   ButtonClick("button", () => true).Should().BeTrue();
   ButtonClick("button[id='testbutton']", () => count > 0).Should().BeTrue();
   ButtonClick(Component.FindAll("button").First(x => x.Id == "testbutton"), () => IsPressed == true).Should().BeTrue();
   ButtonClick(FindAllByTag("button").First(x => x.Id == "testbutton"), () => true).Should().BeTrue();
   ButtonClick(FindById("testbutton"), () => true).Should().BeTrue();
   ]]></code></example>
    </member>
    <member name="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthContext">
      <summary>
       Gets the authentication context.
   </summary>
      <value>The authentication context.</value>
      <seealso cref="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthorizedClaims" />
      <seealso cref="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthorizedPolicies" />
      <seealso cref="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthorizedRoles" />
      <seealso cref="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthUsername" />
      <example>
   Set not authorized.
  <code language="cs"><![CDATA[
   AuthContext.SetNotAuthorized()
   ]]></code></example>
      <example>
   Set authorized user.
  <code language="cs"><![CDATA[
   AuthContext.SetAuthorized("username")
   ]]></code></example>
    </member>
    <member name="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthorizedClaims">
      <summary>
       Gets the authorized claims.
   </summary>
      <value>The authorized claims.</value>
      <seealso cref="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthorizedPolicies" />
      <seealso cref="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthorizedRoles" />
      <seealso cref="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthContext" />
      <seealso cref="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthUsername" />
    </member>
    <member name="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthorizedPolicies">
      <summary>
       Gets the authorized policies.
   </summary>
      <value>The authorized policies.</value>
      <example>
   Setup Policies.
  <code language="cs"><![CDATA[
   protected override MockerObservableCollection<string> AuthorizedPolicies => new MockerObservableCollection<string>() { "Policy1", "Policy2"}
   ]]></code></example>
      <seealso cref="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthorizedClaims" />
      <seealso cref="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthorizedRoles" />
      <seealso cref="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthContext" />
      <seealso cref="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthUsername" />
    </member>
    <member name="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthorizedRoles">
      <summary>
       Gets the authorized roles.
   </summary>
      <value>The authorized roles.</value>
      <example>
   Setup Roles.
  <code language="cs"><![CDATA[
   protected override MockerObservableCollection<string> AuthorizedRoles => new MockerObservableCollection<string>() { "Role1", "Role2"}
   ]]></code></example>
      <seealso cref="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthorizedPolicies" />
      <seealso cref="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthorizedClaims" />
      <seealso cref="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthContext" />
      <seealso cref="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthUsername" />
    </member>
    <member name="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthUsername">
      <summary>
       Gets or sets the authentication username.
   </summary>
      <value>The authentication username.</value>
      <seealso cref="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthorizedClaims" />
      <seealso cref="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthorizedPolicies" />
      <seealso cref="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthorizedRoles" />
      <seealso cref="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthContext" />
      <seealso cref="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthUsername" />
      <example>
   Set authorized user.
  <code language="cs"><![CDATA[
   AuthContext.SetAuthorized("username")
   AuthUsername = "TestUser";
   ]]></code></example>
    </member>
    <member name="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.Component">
      <summary>
       Gets or sets the component.
   </summary>
      <value>The component.</value>
    </member>
    <member name="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.ConfigureServices">
      <summary>
       Gets the configure services.
   </summary>
      <value>The configure services.</value>
      <example>
   Setup Services
  <code language="cs"><![CDATA[
   protected override Action<TestServiceProvider, IConfiguration, Mocker> ConfigureServices => (services, c, m) => services.AddSingleton<IWeatherForecastService, WeatherForecastService>();
   ]]></code></example>
    </member>
    <member name="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.Instance">
      <summary>
       Gets the instance.
   </summary>
      <value>The instance.</value>
    </member>
    <member name="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.Mocks">
      <summary>
       Gets the mocks.
   </summary>
      <value>The mocks.</value>
    </member>
    <member name="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.RenderParameters">
      <summary>
       Gets the render parameters.
   </summary>
      <value>The render parameters.</value>
    </member>
    <member name="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.SetupComponent">
      <summary>
       Gets or sets the setup component.
   </summary>
      <value>The setup component.</value>
    </member>
    <member name="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.TokenSource">
      <summary>
       Gets the token source.
   </summary>
      <value>The token source.</value>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.#ctor">
      <summary>
       Initializes a new instance of the <see cref="T:FastMoq.Web.Blazor.MockerBlazorTestBase`1" /> class.
   </summary>
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.#ctor(System.Boolean)">
      <summary>
       Initializes a new instance of the <see cref="T:FastMoq.Web.Blazor.MockerBlazorTestBase`1" /> class.
   </summary>
      <param name="skipSetup">if set to <c>true</c> [skip setup].</param>
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.GetAllComponents``1">
      <summary>
       Gets all components.
   </summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <returns>Dictionary&lt;TComponent, ComponentState&gt;.</returns>
      <exception cref="T:System.ArgumentNullException">Component</exception>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.GetAllComponents">
      <summary>
       Gets all components.
   </summary>
      <returns>Dictionary&lt;IComponent, ComponentState&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.Setup">
      <summary>
       Setups this instance.
   </summary>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.SetupAuthorization">
      <summary>
       Setups the authorization.
   </summary>
      <seealso cref="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthorizedClaims" />
      <seealso cref="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthorizedPolicies" />
      <seealso cref="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthorizedRoles" />
      <seealso cref="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthContext" />
      <seealso cref="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthUsername" />
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.SetupMocks">
      <summary>
       Setups the mocks.
   </summary>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.SetupServices">
      <summary>
       Setups the services.
   </summary>
      <exception cref="T:System.IO.InvalidDataException">Unable to get {nameof(IConfigurationRoot)} object.</exception>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.ButtonClick(IElement,Func{System.Boolean},System.Nullable{TimeSpan})">
      <summary>
        Buttons the click.
    </summary>
      <inheritdoc />
      <param name="button">The button.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.ButtonClick(System.String,Func{System.Boolean},System.Nullable{TimeSpan})">
      <summary>
        Buttons the click.
    </summary>
      <inheritdoc />
      <param name="cssSelector">The CSS selector.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.ButtonClick``1(System.String,Func{System.Boolean},IRenderedComponent{``0},System.Nullable{TimeSpan})">
      <summary>
        Buttons the click.
    </summary>
      <inheritdoc />
      <param name="cssSelector">The CSS selector.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="startingComponent">The starting component.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.ButtonClick(Func{IElement, System.Boolean},Func{System.Boolean},System.Nullable{TimeSpan})">
      <summary>
        Buttons the click.
    </summary>
      <inheritdoc />
      <param name="cssSelector">The CSS selector.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.ButtonClick``1(System.String,Func{System.Boolean},System.Nullable{TimeSpan})">
      <summary>
        Buttons the click.
    </summary>
      <inheritdoc />
      <param name="cssSelector">The CSS selector.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.ClickDropdownItem``1(IRenderedComponent{``0},System.String,System.String,Func{System.Boolean})">
      <summary>
        Clicks the dropdown item.
    </summary>
      <inheritdoc />
      <param name="component">The component.</param>
      <param name="cssSelector">The CSS selector.</param>
      <param name="propName">Name of the property.</param>
      <param name="waitFunc">The wait function.</param>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <returns>IRenderedComponent&lt;TComponent&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.ClickDropdownItem``1(System.String,Func{System.Boolean},System.String)">
      <inheritdoc />
      <exception cref="T:System.ArgumentNullException">Component</exception>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.FindAllByTag(System.String)">
      <summary>
        Finds all by tag.
    </summary>
      <inheritdoc />
      <param name="tagName">Name of the tag.</param>
      <returns>IEnumerable&lt;IElement&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.FindById(System.String)">
      <summary>
        Finds the by identifier.
    </summary>
      <inheritdoc />
      <param name="id">The identifier.</param>
      <returns>IElement.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.GetComponent``1">
      <summary>
        Gets the component.
    </summary>
      <inheritdoc />
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <returns>IRenderedComponent&lt;TComponent&gt;.</returns>
      <example>
        Get FetchData component. /&gt;
        <code language="cs"><![CDATA[
    var comp = GetComponent<FetchData>();
    ]]></code></example>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.GetComponent``1(Func{IRenderedComponent{``0}, System.Boolean})">
      <summary>
        Gets the component.
    </summary>
      <inheritdoc />
      <param name="predicate">The predicate.</param>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <returns>IRenderedComponent&lt;TComponent&gt;.</returns>
      <example>
        Get FetchData component with Id 1234. /&gt;
        <code language="cs"><![CDATA[
    var comp = GetComponent<FetchData>(x => x.ComponentId == 1234));
    ]]></code></example>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.GetComponent``1(Func{IElement, System.Boolean})">
      <summary>
        Gets the component.
    </summary>
      <inheritdoc />
      <param name="predicate">The predicate.</param>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <returns>IRenderedComponent&lt;TComponent&gt;.</returns>
      <example>
        Get FetchData component with inner html containing text. /&gt;
        <code language="cs"><![CDATA[
    var comp = GetComponent<FetchData>(element => element.InnerHtml.Contains("hello"));
    ]]></code></example>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.GetComponents``1(System.Nullable{Func{IRenderedComponent{``0}, System.Boolean}})">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.GetComponents``1(System.Nullable{Func{IElement, System.Boolean}})">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.GetInjections(Type,Type)">
      <summary>
        Gets the injections.
    </summary>
      <inheritdoc />
      <param name="type">The type.</param>
      <param name="injectAttribute">The inject attribute.</param>
      <returns>IEnumerable&lt;PropertyInfo&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.GetInjections``1">
      <summary>
        Gets the injections.
    </summary>
      <inheritdoc />
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <returns>IEnumerable&lt;PropertyInfo&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.GetInjections(Type)">
      <summary>
        Gets the injections.
    </summary>
      <inheritdoc />
      <param name="type">The type.</param>
      <returns>IEnumerable&lt;PropertyInfo&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.InjectComponent(Type)">
      <summary>
        Injects the component.
    </summary>
      <inheritdoc />
      <param name="type">The type.</param>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.InjectComponent(Type,Type)">
      <summary>
        Injects the component.
    </summary>
      <inheritdoc />
      <param name="type">The type.</param>
      <param name="injectAttribute">The inject attribute.</param>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.InjectComponent``1">
      <summary>
        Injects the component.
    </summary>
      <inheritdoc />
      <typeparam name="TComponent">The type of the t component.</typeparam>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.InjectComponent``2">
      <summary>
        Injects the component.
    </summary>
      <inheritdoc />
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <typeparam name="TInjectAttribute">The type of the t inject attribute.</typeparam>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.IsExists(System.String,System.Boolean)">
      <summary>
        Determines whether the specified CSS selector is exists.
    </summary>
      <inheritdoc />
      <param name="cssSelector">The CSS selector.</param>
      <param name="throwOnNotExist">if set to <c>true</c> [throw on not exist].</param>
      <returns>
        <c>true</c> if the specified CSS selector is exists; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.RenderComponent(System.Boolean)">
      <summary>
        Renders the component. If the component is already rendered, it will act like a stateChanged.
    </summary>
      <inheritdoc />
      <param name="forceNew">if set to <c>true</c> [force new].</param>
      <returns>IRenderedComponent&lt;T&gt;.</returns>
      <example>
        Render again without losing context. This honors any parameters in the RenderParameters action. /&gt;
        <code language="cs"><![CDATA[
    RenderComponent()
    ]]></code></example>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.RenderComponent(Action{ComponentParameterCollectionBuilder{`0}},System.Boolean)">
      <summary>
        Renders the component. If the component is already rendered, it will act like a stateChanged.
    </summary>
      <inheritdoc />
      <param name="parameterBuilder">The parameter builder.</param>
      <param name="forceNew">if set to <c>true</c> [force new].</param>
      <returns>IRenderedComponent&lt;T&gt;.</returns>
      <example>
        Render again with parameters without losing context
        <code language="cs"><![CDATA[
    RenderComponent(b => b.Add(x => x.WeatherService, Mocks.GetObject<IWeatherForecastService>()));
    ]]></code></example>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.SetAutoComplete(System.String,System.String,Func{System.Boolean},System.String)">
      <summary>
        Sets the automatic complete.
    </summary>
      <inheritdoc />
      <param name="cssSelector">The CSS selector.</param>
      <param name="filterText">The filter text.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="itemCssSelector">The item CSS selector.</param>
      <returns>Task.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.SetElementCheck``1(System.String,System.Boolean,Func{System.Boolean},System.Nullable{TimeSpan},System.Nullable{IRenderedFragment})">
      <summary>
        Sets the element check.
    </summary>
      <inheritdoc />
      <param name="cssSelector">The CSS selector.</param>
      <param name="isChecked">if set to <c>true</c> [is checked].</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <param name="startingPoint">The starting point.</param>
      <typeparam name="TComponent">The type of the t component.</typeparam>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.SetElementSwitch``1(System.String,System.Boolean,Func{System.Boolean},System.Nullable{TimeSpan},System.Nullable{IRenderedFragment})">
      <summary>
        Sets the element switch.
    </summary>
      <inheritdoc />
      <param name="cssSelector">The CSS selector.</param>
      <param name="isChecked">if set to <c>true</c> [is checked].</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <param name="startingPoint">The starting point.</param>
      <typeparam name="TComponent">The type of the t component.</typeparam>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.SetElementText(IElement,System.String,Func{System.Boolean},System.Nullable{TimeSpan})">
      <summary>
        Sets the element text.
    </summary>
      <inheritdoc />
      <param name="element">The element.</param>
      <param name="text">The text.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.SetElementText(System.String,System.String,Func{System.Boolean},System.Nullable{TimeSpan},System.Nullable{IRenderedFragment})">
      <summary>
        Sets the element text.
    </summary>
      <inheritdoc />
      <param name="cssSelector">The CSS selector.</param>
      <param name="text">The text.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <param name="startingPoint">The starting point.</param>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.WaitDelay(System.Nullable{TimeSpan})">
      <summary>
        Waits the delay time. Use only when absolutely needed. Prefer use of WaitForState, WaitForExists, or
        WaitForNotExists.
    </summary>
      <inheritdoc />
      <param name="waitTimeout">The wait timeout.</param>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.WaitForExists(System.String,System.Nullable{TimeSpan})">
      <summary>
        Waits for exists.
    </summary>
      <inheritdoc />
      <param name="cssSelector">The CSS selector.</param>
      <param name="waitTimeout">The wait timeout.</param>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.WaitForNotExists(System.String,System.Nullable{TimeSpan})">
      <summary>
        Waits for not exists.
    </summary>
      <inheritdoc />
      <param name="cssSelector">The CSS selector.</param>
      <param name="waitTimeout">The wait timeout.</param>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.WaitForState(Func{System.Boolean},System.Nullable{TimeSpan})">
      <summary>
        Waits for state.
    </summary>
      <inheritdoc />
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="T:FastMoq.Web.Mocks.MockNavigationManager">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Web.Mocks.MockNavigationManager.NavigateToCore(System.String,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="T:FastMoq.Web.Blazor.ComponentState`1">
      <summary>
       Class ComponentState.
       Implements the <see cref="T:FastMoq.Web.Blazor.ComponentState" /></summary>
      <typeparam name="T">
      </typeparam>
      <seealso cref="T:FastMoq.Web.Blazor.ComponentState" />
      <inheritdoc />
    </member>
    <member name="T:FastMoq.Web.Blazor.ComponentState">
      <summary>
       Class ComponentState.
   </summary>
    </member>
    <member name="P:FastMoq.Web.Blazor.ComponentState`1.Component">
      <summary>
       Gets the component.
   </summary>
      <value>The component.</value>
    </member>
    <member name="M:FastMoq.Web.Blazor.ComponentState`1.#ctor(System.Nullable{System.Object},IServiceProvider)">
      <inheritdoc />
      <summary>
       Initializes a new instance of the <see cref="T:FastMoq.Web.Blazor.ComponentState`1" /> class.
   </summary>
      <param name="obj">The object.</param>
      <param name="services">The services.</param>
    </member>
    <member name="P:FastMoq.Web.Blazor.ComponentState.Component">
      <summary>
       Gets the component.
   </summary>
      <value>The component.</value>
    </member>
    <member name="P:FastMoq.Web.Blazor.ComponentState.ComponentId">
      <summary>
       Gets the component identifier.
   </summary>
      <value>The component identifier.</value>
    </member>
    <member name="P:FastMoq.Web.Blazor.ComponentState.CurrentRenderTree">
      <summary>
       Gets the current render tree.
   </summary>
      <value>The current render tree.</value>
    </member>
    <member name="P:FastMoq.Web.Blazor.ComponentState.IsComponentBase">
      <summary>
       Gets a value indicating whether this instance is component base.
   </summary>
      <value>
        <c>true</c> if this instance is component base; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:FastMoq.Web.Blazor.ComponentState.ParentComponentState">
      <summary>
       Gets the state of the parent component.
   </summary>
      <value>The state of the parent component.</value>
    </member>
    <member name="P:FastMoq.Web.Blazor.ComponentState.ComponentType">
      <summary>
       Gets or sets the type of the component.
   </summary>
      <value>The type of the component.</value>
    </member>
    <member name="M:FastMoq.Web.Blazor.ComponentState.#ctor(System.Nullable{System.Object},IServiceProvider)">
      <summary>
       Initializes a new instance of the <see cref="T:FastMoq.Web.Blazor.ComponentState" /> class.
   </summary>
      <param name="obj">The object.</param>
      <param name="services">The services.</param>
      <exception cref="T:System.ArgumentNullException">services</exception>
    </member>
    <member name="M:FastMoq.Web.Blazor.ComponentState.GetOrCreateRenderedComponent(Type)">
      <summary>
       Gets the or create rendered component.
   </summary>
      <param name="type">The type.</param>
      <returns>IRenderedComponentBase&lt;ComponentBase&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.ComponentState.GetOrCreateRenderedComponent``1">
      <summary>
       Creates the rendered component.
   </summary>
      <typeparam name="T">
      </typeparam>
      <returns>System.Nullable&lt;System.Object&gt;.</returns>
    </member>
  </members>
</doc>