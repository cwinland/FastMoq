<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>FastMoq.Web</name>
  </assembly>
  <members>
    <member name="T:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1">
      <summary>
       Interface IMockerBlazorTestHelpers
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.ButtonClick(IElement,Func{System.Boolean},System.Nullable{TimeSpan})">
      <summary>
       Buttons the click.
   </summary>
      <param name="button">The button.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
      <exception cref="ArgumentNullException">button</exception>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.ButtonClick(System.String,Func{System.Boolean},System.Nullable{TimeSpan})">
      <summary>
       Buttons the click.
   </summary>
      <param name="cssSelector">The CSS selector.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.ButtonClick``1(System.String,Func{System.Boolean},IRenderedComponent{``0},System.Nullable{TimeSpan})">
      <summary>
       Buttons the click.
   </summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <param name="cssSelector">The CSS selector.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="startingComponent">The starting component.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.ButtonClick``1(Func{IRenderedComponent{``0}, IElement},Func{System.Boolean},System.Nullable{TimeSpan})">
      <summary>
       Buttons the click.
   </summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <param name="cssSelector">The CSS selector.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
      <exception cref="ArgumentNullException">cssSelector</exception>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.ButtonClick``1(Func{IRenderedComponent{``0}, System.Boolean},Func{System.Boolean},System.Nullable{TimeSpan})">
      <summary>
       Buttons the click.
   </summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <param name="cssSelector">The CSS selector.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
      <exception cref="ArgumentNullException">cssSelector</exception>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.ButtonClick``1(System.String,Func{System.Boolean},System.Nullable{TimeSpan})">
      <summary>
       Buttons the click.
   </summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <param name="cssSelector">The CSS selector.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
      <exception cref="ArgumentNullException">cssSelector</exception>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.ClickDropdownItem``1(IRenderedComponent{``0},System.String,System.String,Func{System.Boolean})">
      <summary>
       Clicks the dropdown item.
   </summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <param name="component">The component.</param>
      <param name="cssSelector">The CSS selector.</param>
      <param name="propName">Name of the property.</param>
      <param name="waitFunc">The wait function.</param>
      <returns>IRenderedComponent&lt;TComponent&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.ClickDropdownItem``1(System.String,Func{System.Boolean},System.String)">
      <summary>
       Clicks the dropdown item.
   </summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <param name="propName">Name of the property.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="cssDropdownSelector">The CSS dropdown selector.</param>
      <returns>IRenderedComponent&lt;DropdownList&lt;TKey, TValue&gt;&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.FindComponent``1(Func{IRenderedComponent{``0}, System.Boolean})">
      <summary>
       Finds the component.
   </summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <param name="selector">The selector.</param>
      <returns>IRenderedComponent&lt;TComponent&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.GetComponent``1">
      <summary>
       Gets the component.
   </summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <returns>IRenderedComponent&lt;TComponent&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.GetComponent``1(Func{IRenderedComponent{``0}, System.Boolean})">
      <summary>
       Gets the component.
   </summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <param name="predicate">The predicate.</param>
      <returns>IRenderedComponent&lt;TComponent&gt;.</returns>
      <exception cref="ArgumentNullException">predicate</exception>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.GetComponents``1(System.Nullable{Func{IRenderedComponent{``0}, System.Boolean}})">
      <summary>
       Gets the components.
   </summary>
      <typeparam name="TOfType">The type of the t of type.</typeparam>
      <param name="predicate">The where function.</param>
      <returns>List&lt;IRenderedComponent&lt;TOfType&gt;&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.GetInjections(Type)">
      <summary>
       Gets the injections.
   </summary>
      <param name="type">The type.</param>
      <returns>IEnumerable&lt;PropertyInfo&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.GetInjections``1">
      <summary>
       Gets the injections.
   </summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <returns>IEnumerable&lt;PropertyInfo&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.GetInjections(Type,Type)">
      <summary>
       Gets the injections.
   </summary>
      <param name="type">The type.</param>
      <param name="injectAttribute">The inject attribute.</param>
      <returns>IEnumerable&lt;PropertyInfo&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.InjectComponent(Type,Type)">
      <summary>
       Injects the component.
   </summary>
      <param name="type">The type.</param>
      <param name="injectAttribute">The inject attribute.</param>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.InjectComponent(Type)">
      <summary>
       Injects the component.
   </summary>
      <param name="type">The type.</param>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.InjectComponent``1">
      <summary>
       Injects the component.
   </summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.InjectComponent``2">
      <summary>
       Injects the component.
   </summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <typeparam name="TInjectAttribute">The type of the t inject attribute.</typeparam>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.IsExists(System.String,System.Boolean)">
      <summary>
       Determines whether the specified CSS selector is exists.
   </summary>
      <param name="cssSelector">The CSS selector.</param>
      <param name="throwOnNotExist">if set to <c>true</c> [throw on not exist].</param>
      <returns>
        <c>true</c> if the specified CSS selector is exists; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.RenderComponent(System.Boolean)">
      <summary>
       Renders the component. If the component is already rendered, it will act like a stateChanged.
   </summary>
      <param name="forceNew">if set to <c>true</c> [force new].</param>
      <returns>IRenderedComponent&lt;T&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.RenderComponent(Action{ComponentParameterCollectionBuilder{`0}},System.Boolean)">
      <summary>
       Renders the component. If the component is already rendered, it will act like a stateChanged.
   </summary>
      <param name="parameterBuilder">The parameter builder.</param>
      <param name="forceNew">if set to <c>true</c> [force new].</param>
      <returns>IRenderedComponent&lt;T&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.SetAutoComplete(System.String,System.String,Func{System.Boolean},System.String)">
      <summary>
       Sets the automatic complete.
   </summary>
      <param name="cssSelector">The CSS selector.</param>
      <param name="filterText">The filter text.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="itemCssSelector">The item CSS selector.</param>
      <returns>Task.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.SetElementCheck``1(System.String,System.Boolean,Func{System.Boolean},System.Nullable{TimeSpan},System.Nullable{IRenderedFragment})">
      <summary>
       Sets the element check.
   </summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <param name="cssSelector">The CSS selector.</param>
      <param name="isChecked">if set to <c>true</c> [is checked].</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <param name="startingPoint">The starting point.</param>
      <exception cref="ArgumentNullException">cssSelector</exception>
      <exception cref="T:Bunit.ElementNotFoundException">
      </exception>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.SetElementSwitch``1(System.String,System.Boolean,Func{System.Boolean},System.Nullable{TimeSpan},System.Nullable{IRenderedFragment})">
      <summary>
       Sets the element switch.
   </summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <param name="cssSelector">The CSS selector.</param>
      <param name="isChecked">if set to <c>true</c> [is checked].</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <param name="startingPoint">The starting point.</param>
      <exception cref="ArgumentNullException">cssSelector</exception>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.SetElementText(IElement,System.String,Func{System.Boolean},System.Nullable{TimeSpan})">
      <summary>
       Sets the element text.
   </summary>
      <param name="element">The element.</param>
      <param name="text">The text.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.SetElementText(System.String,System.String,Func{System.Boolean},System.Nullable{TimeSpan},System.Nullable{IRenderedFragment})">
      <summary>
       Sets the element text.
   </summary>
      <param name="cssSelector">The CSS selector.</param>
      <param name="text">The text.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <param name="startingPoint">The starting point.</param>
      <exception cref="ArgumentNullException">cssSelector</exception>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.WaitDelay(System.Nullable{TimeSpan})">
      <summary>
       Waits the delay time. Use only when absolutely needed. Prefer use of WaitForState, WaitForExists, or
       WaitForNotExists.
   </summary>
      <param name="waitTimeout">The wait timeout.</param>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.WaitForExists(System.String,System.Nullable{TimeSpan})">
      <summary>
       Waits for exists.
   </summary>
      <param name="cssSelector">The CSS selector.</param>
      <param name="waitTimeout">The wait timeout.</param>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.WaitForNotExists(System.String,System.Nullable{TimeSpan})">
      <summary>
       Waits for not exists.
   </summary>
      <param name="cssSelector">The CSS selector.</param>
      <param name="waitTimeout">The wait timeout.</param>
    </member>
    <member name="M:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1.WaitForState(Func{System.Boolean},System.Nullable{TimeSpan})">
      <summary>
       Waits for state.
   </summary>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="T:FastMoq.Web.Blazor.MockerBlazorTestBase`1">
      <summary>
       Common methods for all BUnit/XUnit Tests.
   </summary>
      <typeparam name="T">Type of the component being tested.</typeparam>
      <inheritdoc cref="T:Bunit.TestContext" />
      <inheritdoc cref="T:FastMoq.Web.Blazor.Interfaces.IMockerBlazorTestHelpers`1" />
    </member>
    <member name="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthContext">
      <summary>
       Gets the authentication context.
   </summary>
      <value>The authentication context.</value>
    </member>
    <member name="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthorizedPolicies">
      <summary>
       Gets the authorized policies.
   </summary>
      <value>The authorized policies.</value>
    </member>
    <member name="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthorizedRoles">
      <summary>
       Gets the authorized roles.
   </summary>
      <value>The authorized roles.</value>
    </member>
    <member name="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.AuthUsername">
      <summary>
       Gets or sets the authentication username.
   </summary>
      <value>The authentication username.</value>
    </member>
    <member name="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.Component">
      <summary>
       Rendered Component being tested.
   </summary>
      <value>The component.</value>
    </member>
    <member name="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.ConfigureServices">
      <summary>
       Gets the configure services.
   </summary>
      <value>The configure services.</value>
    </member>
    <member name="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.Instance">
      <summary>
       Gets the instance of the rendered component T.
   </summary>
      <value>The instance.</value>
    </member>
    <member name="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.Mocks">
      <summary>
       Gets the mocks.
   </summary>
      <value>The mocks.</value>
    </member>
    <member name="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.RenderParameters">
      <summary>
       Gets the render parameters.
   </summary>
      <value>The render parameters.</value>
    </member>
    <member name="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.SetupComponent">
      <summary>
       Gets the setup component.
   </summary>
      <value>The setup component.</value>
    </member>
    <member name="P:FastMoq.Web.Blazor.MockerBlazorTestBase`1.TokenSource">
      <summary>
       Gets the token source.
   </summary>
      <value>The token source.</value>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.#ctor">
      <summary>
       Initializes a new instance of the <see cref="T:FastMoq.Web.Blazor.MockerBlazorTestBase`1" /> class.
   </summary>
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.#ctor(System.Boolean)">
      <summary>
       Initializes a new instance of the <see cref="T:FastMoq.Web.Blazor.MockerBlazorTestBase`1" /> class.
   </summary>
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.GetAllComponents">
      <summary>
       Gets all components.
   </summary>
      <returns>Dictionary&lt;ComponentBase, ComponentState&gt;.</returns>
      <exception cref="T:System.ArgumentNullException">Component</exception>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.SetupAuthorization">
      <summary>
       Setups the authorization.
   </summary>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.ButtonClick(IElement,Func{System.Boolean},System.Nullable{TimeSpan})">
      <summary>
        Buttons the click.
    </summary>
      <inheritdoc />
      <exception cref="T:System.ArgumentNullException">button</exception>
      <param name="button">The button.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.ButtonClick(System.String,Func{System.Boolean},System.Nullable{TimeSpan})">
      <summary>
        Buttons the click.
    </summary>
      <inheritdoc />
      <param name="cssSelector">The CSS selector.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.ButtonClick``1(System.String,Func{System.Boolean},IRenderedComponent{``0},System.Nullable{TimeSpan})">
      <summary>
        Buttons the click.
    </summary>
      <inheritdoc />
      <param name="cssSelector">The CSS selector.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="startingComponent">The starting component.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.ButtonClick``1(Func{IRenderedComponent{``0}, IElement},Func{System.Boolean},System.Nullable{TimeSpan})">
      <summary>
        Buttons the click.
    </summary>
      <inheritdoc />
      <exception cref="ArgumentNullException">cssSelector</exception>
      <param name="cssSelector">The CSS selector.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.ButtonClick``1(Func{IRenderedComponent{``0}, System.Boolean},Func{System.Boolean},System.Nullable{TimeSpan})">
      <summary>
        Buttons the click.
    </summary>
      <inheritdoc />
      <exception cref="ArgumentNullException">cssSelector</exception>
      <param name="cssSelector">The CSS selector.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.ButtonClick``1(System.String,Func{System.Boolean},System.Nullable{TimeSpan})">
      <summary>
        Buttons the click.
    </summary>
      <inheritdoc />
      <exception cref="ArgumentNullException">cssSelector</exception>
      <param name="cssSelector">The CSS selector.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.ClickDropdownItem``1(IRenderedComponent{``0},System.String,System.String,Func{System.Boolean})">
      <summary>
        Clicks the dropdown item.
    </summary>
      <inheritdoc />
      <param name="component">The component.</param>
      <param name="cssSelector">The CSS selector.</param>
      <param name="propName">Name of the property.</param>
      <param name="waitFunc">The wait function.</param>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <returns>IRenderedComponent&lt;TComponent&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.ClickDropdownItem``1(System.String,Func{System.Boolean},System.String)">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.FindComponent``1(Func{IRenderedComponent{``0}, System.Boolean})">
      <summary>
        Finds the component.
    </summary>
      <inheritdoc />
      <exception cref="T:System.NotImplementedException">Unable to find {typeof(TComponent)}</exception>
      <param name="selector">The selector.</param>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <returns>IRenderedComponent&lt;TComponent&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.GetComponent``1">
      <summary>
        Gets the component.
    </summary>
      <inheritdoc />
      <exception cref="T:System.ArgumentNullException">predicate</exception>
      <exception cref="T:System.ArgumentNullException">Component</exception>
      <exception cref="T:System.Runtime.AmbiguousImplementationException">
       Multiple components of type '{typeof(TComponent)}'
       was found.
   </exception>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <returns>IRenderedComponent&lt;TComponent&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.GetComponent``1(Func{IRenderedComponent{``0}, System.Boolean})">
      <summary>
       Gets the component.
   </summary>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <param name="predicate">The predicate.</param>
      <returns>IRenderedComponent&lt;TComponent&gt;.</returns>
      <exception cref="T:System.ArgumentNullException">predicate</exception>
      <exception cref="T:System.ArgumentNullException">Component</exception>
      <exception cref="T:System.Runtime.AmbiguousImplementationException">
       Multiple components of type '{typeof(TComponent)}'
       was found.
   </exception>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.GetComponents``1(System.Nullable{Func{IRenderedComponent{``0}, System.Boolean}})">
      <summary>
        Gets the components.
    </summary>
      <inheritdoc />
      <exception cref="T:System.ArgumentNullException">whereFunc</exception>
      <exception cref="T:System.Runtime.AmbiguousImplementationException">
       Multiple components of type '{typeof(TComponent)}'
       was found.
   </exception>
      <param name="predicate">The where function.</param>
      <typeparam name="TOfType">The type of the t of type.</typeparam>
      <returns>List&lt;IRenderedComponent&lt;TOfType&gt;&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.GetInjections(Type,Type)">
      <summary>
        Gets the injections.
    </summary>
      <inheritdoc />
      <param name="type">The type.</param>
      <param name="injectAttribute">The inject attribute.</param>
      <returns>IEnumerable&lt;PropertyInfo&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.GetInjections``1">
      <summary>
        Gets the injections.
    </summary>
      <inheritdoc />
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <returns>IEnumerable&lt;PropertyInfo&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.GetInjections(Type)">
      <summary>
        Gets the injections.
    </summary>
      <inheritdoc />
      <param name="type">The type.</param>
      <returns>IEnumerable&lt;PropertyInfo&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.InjectComponent(Type)">
      <summary>
        Injects the component.
    </summary>
      <inheritdoc />
      <exception cref="NullReferenceException">When Mock object is null.</exception>
      <param name="type">The type.</param>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.InjectComponent(Type,Type)">
      <summary>
        Injects the component.
    </summary>
      <inheritdoc />
      <exception cref="NullReferenceException">When Mock object is null.</exception>
      <param name="type">The type.</param>
      <param name="injectAttribute">The inject attribute.</param>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.InjectComponent``1">
      <summary>
        Injects the component.
    </summary>
      <inheritdoc />
      <exception cref="NullReferenceException">When Mock object is null.</exception>
      <typeparam name="TComponent">The type of the t component.</typeparam>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.InjectComponent``2">
      <summary>
        Injects the component.
    </summary>
      <inheritdoc />
      <exception cref="NullReferenceException">When Mock object is null.</exception>
      <typeparam name="TComponent">The type of the t component.</typeparam>
      <typeparam name="TInjectAttribute">The type of the t inject attribute.</typeparam>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.IsExists(System.String,System.Boolean)">
      <summary>
        Determines whether the specified CSS selector is exists.
    </summary>
      <inheritdoc />
      <exception cref="ApplicationException">When throwOnNotExists: Component or Component with cssSelector is not found.</exception>
      <param name="cssSelector">The CSS selector.</param>
      <param name="throwOnNotExist">if set to <c>true</c> [throw on not exist].</param>
      <returns>
        <c>true</c> if the specified CSS selector is exists; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.RenderComponent(System.Boolean)">
      <summary>
        Renders the component. If the component is already rendered, it will act like a stateChanged.
    </summary>
      <inheritdoc />
      <param name="forceNew">if set to <c>true</c> [force new].</param>
      <returns>IRenderedComponent&lt;T&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.RenderComponent(Action{ComponentParameterCollectionBuilder{`0}},System.Boolean)">
      <summary>
        Renders the component. If the component is already rendered, it will act like a stateChanged.
    </summary>
      <inheritdoc />
      <param name="parameterBuilder">The parameter builder.</param>
      <param name="forceNew">if set to <c>true</c> [force new].</param>
      <returns>IRenderedComponent&lt;T&gt;.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.SetAutoComplete(System.String,System.String,Func{System.Boolean},System.String)">
      <summary>
        Sets the automatic complete.
    </summary>
      <inheritdoc />
      <param name="cssSelector">The CSS selector.</param>
      <param name="filterText">The filter text.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="itemCssSelector">The item CSS selector.</param>
      <returns>Task.</returns>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.SetElementCheck``1(System.String,System.Boolean,Func{System.Boolean},System.Nullable{TimeSpan},System.Nullable{IRenderedFragment})">
      <summary>
        Sets the element check.
    </summary>
      <inheritdoc />
      <exception cref="ArgumentNullException">cssSelector</exception>
      <exception cref="T:Bunit.ElementNotFoundException">
      </exception>
      <param name="cssSelector">The CSS selector.</param>
      <param name="isChecked">if set to <c>true</c> [is checked].</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <param name="startingPoint">The starting point.</param>
      <typeparam name="TComponent">The type of the t component.</typeparam>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.SetElementSwitch``1(System.String,System.Boolean,Func{System.Boolean},System.Nullable{TimeSpan},System.Nullable{IRenderedFragment})">
      <summary>
        Sets the element switch.
    </summary>
      <inheritdoc />
      <exception cref="ArgumentNullException">cssSelector</exception>
      <param name="cssSelector">The CSS selector.</param>
      <param name="isChecked">if set to <c>true</c> [is checked].</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <param name="startingPoint">The starting point.</param>
      <typeparam name="TComponent">The type of the t component.</typeparam>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.SetElementText(IElement,System.String,Func{System.Boolean},System.Nullable{TimeSpan})">
      <summary>
        Sets the element text.
    </summary>
      <inheritdoc />
      <exception cref="T:System.ArgumentNullException">element</exception>
      <param name="element">The element.</param>
      <param name="text">The text.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.SetElementText(System.String,System.String,Func{System.Boolean},System.Nullable{TimeSpan},System.Nullable{IRenderedFragment})">
      <summary>
        Sets the element text.
    </summary>
      <inheritdoc />
      <exception cref="ArgumentNullException">cssSelector</exception>
      <param name="cssSelector">The CSS selector.</param>
      <param name="text">The text.</param>
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <param name="startingPoint">The starting point.</param>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.WaitDelay(System.Nullable{TimeSpan})">
      <summary>
        Waits the delay time. Use only when absolutely needed. Prefer use of WaitForState, WaitForExists, or
        WaitForNotExists.
    </summary>
      <inheritdoc />
      <param name="waitTimeout">The wait timeout.</param>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.WaitForExists(System.String,System.Nullable{TimeSpan})">
      <summary>
        Waits for exists.
    </summary>
      <inheritdoc />
      <param name="cssSelector">The CSS selector.</param>
      <param name="waitTimeout">The wait timeout.</param>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.WaitForNotExists(System.String,System.Nullable{TimeSpan})">
      <summary>
        Waits for not exists.
    </summary>
      <inheritdoc />
      <param name="cssSelector">The CSS selector.</param>
      <param name="waitTimeout">The wait timeout.</param>
    </member>
    <member name="M:FastMoq.Web.Blazor.MockerBlazorTestBase`1.WaitForState(Func{System.Boolean},System.Nullable{TimeSpan})">
      <summary>
        Waits for state.
    </summary>
      <inheritdoc />
      <param name="waitFunc">The wait function.</param>
      <param name="waitTimeout">The wait timeout.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="T:FastMoq.Web.Mocks.MockNavigationManager">
      <inheritdoc />
    </member>
    <member name="M:FastMoq.Web.Mocks.MockNavigationManager.NavigateToCore(System.String,System.Boolean)">
      <inheritdoc />
    </member>
  </members>
</doc>