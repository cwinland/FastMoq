# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL Advanced"

on:
  workflow_call:
  schedule:
    - cron: '15 5 * * 1'

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: csharp
          build-mode: manual
        # CodeQL supports the following values keywords for 'language': 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET SDKs
      if: matrix.language == 'csharp'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          9.0.x
          8.0.x

    # Generate lock files for .NET so dependency submission (CodeQL) finds them
    - name: Restore .NET (generate lock files)
      if: matrix.language == 'csharp'
      run: |
        set -euo pipefail
        echo "Restoring .NET projects with lock file generation"
        # Use solution if present; otherwise fall back to individual csproj files
        if ls *.sln 1> /dev/null 2>&1; then
          for sln in *.sln; do
            echo "Restoring solution: $sln"
            dotnet restore "$sln" --use-lock-file
          done
        else
          echo "No solution file found; restoring individual projects"
          find . -name '*.csproj' -maxdepth 6 -print0 | xargs -0 -I{} dotnet restore {} --use-lock-file
        fi
        echo "Lock files generated (packages.lock.json)"

    # Configure environment before firewall restrictions
    - name: Configure GitHub Actions environment
      run: |
        echo "Setting up environment before firewall restrictions..."
        # Configure git for potential operations
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    - name: Build (manual single TFM for CodeQL)
      if: matrix.language == 'csharp' && matrix.build-mode == 'manual'
      run: |
        set -euo pipefail
        echo "Manual build for CodeQL semantic extraction (net9.0)"
        # Build only once for highest supported TFM to capture symbols
        dotnet build FastMoq.sln -c Release -f net9.0 /p:UseSharedCompilation=false --no-restore

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
