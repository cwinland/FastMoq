name: CI Template

on:
  workflow_call:
    inputs:
      projects:
        required: true
        type: string
      frameworks:
        required: true
        type: string

permissions:
  contents: read
  security-events: write
  packages: read
  actions: read

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.filter.outputs.code }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            code:
              - '**/*.cs'
              - '**/*.csproj'
              - '**/*.sln'
              - 'FastMoq*.nuspec'
              - '!docs/**'
              - '!**/*.md'
              - '!Help/**'
  codeql:
    needs: changes
    if: needs.changes.outputs.code == 'true'
    uses: ./.github/workflows/codeql.yml

  build-test:
    needs: changes
    if: needs.changes.outputs.code == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        framework: ${{ fromJSON(inputs.frameworks) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.framework }}
          cache: true
          cache-dependency-path: |
            **/*.csproj
            **/*.sln

      - name: Set environment
        run: |
          echo "DOTNET_CLI_TELEMETRY_OPTOUT=1" >> $GITHUB_ENV
          echo "DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1" >> $GITHUB_ENV
          echo "NUGET_PACKAGES=$HOME/.nuget/packages" >> $GITHUB_ENV

      - run: dotnet --info

      - name: Restore (TFM-scoped)
        env:
          FW: ${{ matrix.framework }}
          STEP_NAME: RESTORE
        run: |
          set -euo pipefail
          FW_NOX="${FW%%.x}"
          IFS='.' read -r major minor rest <<< "$FW_NOX"
          minor="${minor:-0}"
          tfm="net${major}.${minor}"
          echo "Derived TFM: $tfm from framework input '$FW'"
          : > skipped.txt
          for proj in ${{ inputs.projects }}; do
            if ! grep -Eiq "net${major}\\.${minor}" "$proj"; then
              echo "Skipping $proj (does not target $tfm)"
              echo "[RESTORE] $proj ($tfm)" >> skipped.txt
              continue
            fi
            dotnet restore "$proj" --framework "$tfm" --use-lock-file --locked-mode
          done

      - name: Build (TFM-scoped)
        env:
          FW: ${{ matrix.framework }}
        run: |
          set -euo pipefail
          FW_NOX="${FW%%.x}"
          IFS='.' read -r major minor rest <<< "$FW_NOX"
          minor="${minor:-0}"
          tfm="net${major}.${minor}"
          echo "Building for $tfm"
          for proj in ${{ inputs.projects }}; do
            if ! grep -Eiq "net${major}\\.${minor}" "$proj"; then
              echo "Skipping build $proj (missing $tfm)"
              echo "[BUILD] $proj ($tfm)" >> skipped.txt
              continue
            fi
            dotnet build "$proj" --framework "$tfm" --no-restore -c Release
          done

      - name: Test (TFM-scoped)
        env:
          FW: ${{ matrix.framework }}
        run: |
          set -euo pipefail
          FW_NOX="${FW%%.x}"
          IFS='.' read -r major minor rest <<< "$FW_NOX"
          minor="${minor:-0}"
          tfm="net${major}.${minor}"
          echo "Testing for $tfm"
          for proj in ${{ inputs.projects }}; do
            if ! grep -Eiq "net${major}\\.${minor}" "$proj"; then
              echo "Skipping test $proj (missing $tfm)"
              echo "[TEST] $proj ($tfm)" >> skipped.txt
              continue
            fi
            resultsDir="TestResults/${tfm}"
            mkdir -p "$resultsDir"
            # --no-restore added to avoid a second implicit restore that was failing with a missing lock file in CI
            dotnet test "$proj" --framework "$tfm" --no-build --no-restore --configuration Release \
              --logger "trx;LogFileName=${tfm}-results.trx" \
              --collect "XPlat Code Coverage" \
              --results-directory "$resultsDir" || echo "Test failures captured for $proj ($tfm)"
          done

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.framework }}
          path: |
            TestResults/**
            **/coverage.cobertura.xml
          if-no-files-found: ignore

      - name: Summary of skipped projects
        if: always()
        run: |
            {
            echo "### Skipped Projects Summary"
            if [[ -s skipped.txt ]]; then
                cat skipped.txt
            else
                echo "No projects were skipped."
            fi
            } >> "$GITHUB_STEP_SUMMARY"

