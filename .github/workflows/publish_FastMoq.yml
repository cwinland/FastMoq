name: publish_FastMoq
on:
  release:
    types: [published]
  push:
    branches:
      - master # Release branch
    paths:
      - .github/workflows/publish_FastMoq.yml

jobs:
  test:
    uses: ./.github/workflows/pr_FastMoq.yml

  publish:
    needs: test
    name: build, pack & publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Configure environment before firewall restrictions
      - name: Configure GitHub Actions environment
        run: |
          echo "Setting up environment before firewall restrictions..."
          # Configure git for potential package operations
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
          
      # Configure NuGet sources with authentication before operations
      - name: Configure NuGet sources
        run: |
          dotnet nuget add source https://api.nuget.org/v3/index.json --name nuget.org --configfile $(dotnet nuget locals global-packages --list | cut -d' ' -f2)/NuGet.Config || true
          
      # Publish
      - name: Build FastMoq
        run: dotnet build FastMoq-Release.sln -c Release

      - name: Fetch all tags
        run: git fetch --tags

      - name: Validate and set version
        id: validate
        run: |
          TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          VERSION=${TAG#v} # Remove 'v' from the beginning of the tag
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$ ]]; then
            echo "VERSION=$VERSION" >> $GITHUB_ENV
          else
            echo "Error: Latest tag ($TAG) is not a valid SemVer version"
            exit 1
          fi
          
      - name: Creating a package
        run: dotnet pack FastMoq-Release.sln --no-build -c Release -o . /p:PackageVersion=${{ env.VERSION }}

      - name: Push to NuGet
        id: push
        run: |
          OUTPUT=$(dotnet nuget push *.nupkg -s https://api.nuget.org/v3/index.json -k ${{secrets.NUGET_API_KEY}} --skip-duplicate)
          echo "$OUTPUT"
          if [[ $OUTPUT == *"Your package was pushed"* ]]; then
            echo "Push successful"
          else
            echo "Push failed"
            exit 1
          fi
