name: publish_FastMoq

on:
  release:
    types: [published]

jobs:
  # 1. Test matrix using FastMoq.sln
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        framework: ["8.0.x", "9.0.100-rc.*"] # Change 9.0.* after GA
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.framework }}
      - run: dotnet restore FastMoq.sln
      - name: Build
        env:
          FW: ${{ matrix.framework }}
        run: |
          tfm="net${FW%.*}"   # Bash trims .x or prerelease suffix
          dotnet build FastMoq.sln --framework "$tfm"
      - name: Test
        env:
          FW: ${{ matrix.framework }}
        run: |
          tfm="net${FW%.*}"
          dotnet test FastMoq.sln --framework "$tfm" --no-build

  # 2. Package job using FastMoq-Release.sln (all TFMs)
  package:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          # Install all SDKs needed for all TFMs in FastMoq-Release.sln
          # For .NET 9 before GA, use latest prerelease pattern (e.g. "9.0.100-rc.*"), then change to "9.0.x"
          dotnet-version: |
            6.0.x
            8.0.x
            9.0.100-rc.*
      - run: dotnet restore FastMoq-Release.sln
      - run: dotnet build FastMoq-Release.sln -c Release
      - run: dotnet pack FastMoq-Release.sln -c Release -o ./artifacts
      - uses: actions/upload-artifact@v4
        with:
          name: FastMoq-nuget
          path: ./artifacts/*.nupkg

  # 3. Publish job â€” no rebuild, just push the tested package
  publish:
    runs-on: ubuntu-latest
    needs: package
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: FastMoq-nuget
          path: .
      - name: Fetch all tags
        run: git fetch --tags
      - name: Validate and set version
        run: |
          TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          VERSION=${TAG#v}
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$ ]]; then
            echo "VERSION=$VERSION" >> $GITHUB_ENV
          else
            echo "Error: Latest tag ($TAG) is not a valid SemVer version"
            exit 1
          fi
      - name: Check if version already published
        run: |
          EXISTING=$(dotnet nuget list package FastMoq --source https://api.nuget.org/v3/index.json | grep -E "FastMoq\s+$VERSION" || true)
          if [ -n "$EXISTING" ]; then
            echo "Version $VERSION already exists on NuGet. Skipping publish."
            exit 0
          fi
      - name: Push to NuGet
        run: dotnet nuget push *.nupkg -s https://api.nuget.org/v3/index.json -k ${{ secrets.NUGET_API_KEY }} --skip-duplicate
